{"metadata":"{\"defaultCompiler\":{\"version\":\"0.8.18\"},\"sources\":{\"contracts/core/Orderbook.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.18;\\n\\nimport \\\"./dep/ERC20.sol\\\";\\nimport \\\"./dep/SafeERC20.sol\\\";\\nimport \\\"./dep/ReentrancyGuard.sol\\\";\\nimport \\\"./dep/Ownable.sol\\\";\\nimport \\\"./interfaces/IOrderbookVerifier.sol\\\";\\nimport \\\"./interfaces/IOrderbook.sol\\\";\\n\\n/**\\n * @title Orderbook\\n * @notice This contract is used to store sell orders and claims. Each seller, places a sell-order and can optionally permission the\\n * right to claim their order to a 'sybilContract'. The seller also specifies a 'verifyContract' which is used to verify proofs of \\n * payments which are used by buyers to unlock their claims.\\n * @dev This contract is build to abstract away proof verification and sybil-prevention which are handled on the verifier and sybil \\n * contracts. This also means that multiple payment methods and tokens which use different sybil contracts and verifiers could be\\n * supported by a single orderbook. This contract follows a simple bulletin-board design where orders are posted but all routing logic\\n * happens off-chain. It is up to the buyer to find a sell order and ensure that the seller correctly configured the rules to place a\\n * claim and unlock funds on the sybil contract and verifier. The types used for values are as followed:\\n * unit32 - All timestamps use uint32 to represent the unix timestamp. All timestamp comparisons are only done relative to block.timestamp \\n * and reserveTime (which should be ~1 hour) hence over and underflowing are unlikely. maxProverFee and the value of claims are also uint32\\n * which is large enough given that these values are in cents and most payment providers cap the size of an individual transaction.\\n * uint64 - totalReserved is a uint64 which is large enough to store the total amount of cents that can be reserved on a sell order. A \\n * seller could configure amount and price such that in  certain cases, UINT64_MAX worth of cents is reserved by a given sell order. The \\n * only affect of this is that no further claims can be placed (placing additional claims will fail due to overflow).\\n * uint128 - all values of tokens in native decimal are stored as uint128. This contract is intended to be used for placing buy and sell\\n * orders in stablecoins (which typically have 6-18 decimals) hence this value is sufficient to prevent overflow.\\n * uint256 - All indices and lengths of arrays are stored as uint256.\\n */\\ncontract Orderbook is IOrderbook, ReentrancyGuard, Ownable { \\n    using SafeERC20 for IERC20;\\n\\n    /** \\n     * @notice reserveTime - the amount of time in seconds after a buyer has placed a claim that funds on a sell order are reserved for. \\n     * @dev This ensures that if a seller changesPrice or closes the order, that no buys are currently active.\\n     * This should be set to give the buyer enough time to unlock their funds after they have placed a claim. Before a seller can close or\\n     * change the price of the position, they must wait until all orders on their position are expired, after pausing their order. Hence this\\n     * value is also used to check expiry of orders in those functions.\\n     */\\n    uint32 public immutable reserveTime; \\n\\n    /**\\n     * @notice tokenBalances - A mapping from token address to the amount of that token held by the contract. \\n     * @dev This is used to calculate the amount of tokens transfered in to the contract when a sell order is placed. The contract is only intended to \\n     * be used to list sellOrders in stablecoins in which uint128 is sufficient to store the amount of tokens. \\n     */\\n    mapping (address => uint128) public tokenBalances; \\n\\n    /** \\n     * @notice sellAmounts - A mapping from a sellOrderKey to an Amounts struct which stores:\\n     * amount - A uint128 representing the total amount of tokens left in the order. This is in token native decimals. Placing a claim\\n     * does not decrement this but unlockFunds, trasnferUnreserved and closeSellOrder do.\\n     * totalReserved - A uint64 representing the amount of funds that have been reserved, in cents. The conversion between cents and\\n     * token decimals is handled by the 'price' value fo the seller's sell order. \\n     * scheduleCloseTimestamp - A uint32 which is either 0 (the sell order is not scheduled to close), or the timestamp at which it\\n     * was scheduled to close.\\n     * maxClaimAmount - The maximum value in cents of a single claim. Certain payment methods limit transaction sizes and so this value\\n     * ensures that buyers don't claim an unecessary amount of a sell order. \\n     */\\n    mapping (bytes32 => Amounts) public sellAmounts; \\n    \\n    /**\\n     * @notice onrampClaims A mapping from a sellOrderKey to an array of ClaimDigests. Each claim will have a corresponding ClaimDigest.\\n     * Each ClaimDigest stores:\\n     * onramperWallet - The address to receive the funds if the claim is fulfilled.\\n     * maxProverFee - A uint32 representing the maximum amount in cents that the onramper is willing to pay to the prover.\\n     * amount - A uint32 representing the value of the claim in cents. \\n     * timestamp - A uint32 representing the timestamp at which the claim was placed.\\n     */\\n    mapping (bytes32 => ClaimDigest[]) public onrampClaims;  \\n\\n    /**\\n     * @notice Whitelist of approved tokens. Done to ensure that only stablecoins are allowed to be traded on the orderbook.\\n     */\\n    mapping (address => bool) public whitelistedTokens;\\n\\n    /**\\n     * @notice A whitelist of interfaces that can call place sell order. Done to ensure users correctly call placeSellOrder and do\\n     * not lose their funds.\\n     */\\n    mapping(address => bool) public whitelistedInterfaces;\\n\\n    /**\\n     * @param _reserveTime The value in seconds that reserveTime is set to.\\n     */\\n    constructor(uint32 _reserveTime, address _initialOwner) {\\n        reserveTime = _reserveTime; \\n        transferOwnership(_initialOwner);\\n    }\\n\\n    /**\\n     * @notice function to add tokens to the whitelist.\\n     */\\n    function addTokens(address[] calldata tokens) external onlyOwner {\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            whitelistedTokens[tokens[i]] = true;\\n        }\\n    }\\n\\n    /**\\n     * @notice function to add interfaces to the whitelist.\\n     */\\n    function addInterfaces(address[] calldata interfaces) external onlyOwner {\\n        for (uint256 i = 0; i < interfaces.length; i++) {\\n            whitelistedInterfaces[interfaces[i]] = true;\\n        }\\n    }\\n\\n    /**\\n     * @notice function to remove tokens from the whitelist.\\n     */\\n    function removeTokens(address[] calldata tokens) external onlyOwner {\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            whitelistedTokens[tokens[i]] = false;\\n        }\\n    }\\n\\n    /**\\n     * @notice function to remove interfaces from the whitelist.\\n     */\\n    function removeInterfaces(address[] calldata interfaces) external onlyOwner {\\n        for (uint256 i = 0; i < interfaces.length; i++) {\\n            whitelistedInterfaces[interfaces[i]] = false;\\n        }\\n    }\\n\\n    /**\\n     * @notice Called by the seller to place a sell order.\\n     * @dev Transfers in funds, calculates a unique sell order key based on the values of the sell order and then writes to sellAmounts.\\n     * If the sellOrderKey is the same as an existing order, this function will combine those two orders. The sell order is 'bound' to\\n     * the sellOrderKey and thus the data which is its pre-image. The sell order struct contains:\\n     * seller - The address of the seller. Used to permission the functions to manage the sell order. \\n     * price - A uint96, representing the amount of tokens (in native token) recieved for 1 cent sent to the seller. This is used for\\n     * conversions between 'amount' and 'maxProverFee' to token decimals in claimSellOrder and unlockFunds. \\n     * token - The address of the token that the seller is selling. Intended to be a stablecoin.\\n     * verifyContract - The address of the verifier. Needs to implement IVerifier. Used to verify a buyer's proof of payment and\\n     * stores information about the seller used to verify proofs.\\n     * sybilContract - A contract that is used to permission the right to place claims on a sell order. This is used to prevent a\\n     * sell order from being entirely claimed by sybil claims/wallets. This contract is also able to call cancelScheduleClose, \\n     * updateSellPrice and closeSellOrder after the seller has called scheduleCloseSell for a sufficient amount of time. A seller can pass\\n     * in the 0 address if they don't want to permission these functions.\\n     */\\n    function placeSellOrder(SellOrder calldata sellOrder, uint32 maxClaimAmount) external nonReentrant { \\n        ///FLAG: need to allow tx.origin so that the seller can use an interface to transfer funds in and place an order in one transaction.\\n        require((tx.origin == sellOrder.seller) || (msg.sender == sellOrder.seller), \\\"1\\\");\\n\\n        require(whitelistedInterfaces[msg.sender], \\\"2\\\");\\n\\n        require(whitelistedTokens[sellOrder.token], \\\"3\\\");\\n\\n        uint128 tokenAmount = _transferIn(sellOrder.token);\\n\\n        _updateReserves(sellOrder.token);\\n\\n        _placeSell(sellOrder.seller, sellOrder.price, sellOrder.token, sellOrder.verifyContract, sellOrder.sybilContract, tokenAmount, maxClaimAmount);\\n    }\\n    \\n    /**\\n     * @notice This function is called by the sybilContract or the onramper to reserve funds in a sell order.\\n     * @dev This function checks that the seller hasn't schedule a close, that the claim amount is large enough to pay maxProverFee,\\n     * is less than maxClaimAMount and that the sell order has enough unreserved money for the onramper to claim. \\n     * @param expiredIdx is an array of indices in onrampClaims of expired claims or free indices. The contract calls clearExpired to verify that these\\n     * indices are expired and updates totalReserved. ExpiredIdx should be an array in decreasing order.  If expiredIdx is an empty \\n     * array, the new claim is added to the end of the array, otherwise it is placed on the smallest index in expiredIdx that is free.\\n     */\\n    function claimSellOrder(SellOrder calldata sellOrder, address onramperWallet, uint32 amount, uint32 maxProverFee, uint256[] calldata expiredIdx) external returns (uint256 claimIndex) { \\n        if (sellOrder.sybilContract != address(0)) { require(msg.sender == sellOrder.sybilContract); } \\n        \\n        bytes32 sellOrderKey = getSellKey(sellOrder.seller, sellOrder.price, sellOrder.token, sellOrder.verifyContract, sellOrder.sybilContract);\\n\\n        Amounts memory sellAmount = sellAmounts[sellOrderKey];\\n\\n        require(sellAmount.scheduleCloseTimestamp == 0, \\\"1\\\");\\n\\n        require(amount <= sellAmount.maxClaimAmount, \\\"2\\\");\\n\\n        /// Amount and maxProverFee are in cents\\n        require(amount > maxProverFee, \\\"3\\\"); \\n\\n        // Clear the expired claims, free up cents, and get the position of the first free index in the claims array\\n        (uint256 firstFree, uint256 claimLength, uint64 amountCleared) = clearExpired(sellOrderKey, expiredIdx);\\n        claimIndex = firstFree;\\n\\n        sellAmount.totalReserved = sellAmount.totalReserved + uint64(amount) - amountCleared;\\n\\n        /// Ensure enough is free. If the multiplication overflows, then the additional order couldn't have been placed anyway.\\n        require(uint128(sellAmount.totalReserved) * uint128(sellOrder.price) <= uint128(sellAmount.amount), \\\"4\\\");\\n\\n        /// claimIndex will be the index of the last invalid claim so will either be the length of the array or the index of the first free slot\\n        if (claimIndex == claimLength) {\\n            onrampClaims[sellOrderKey].push(ClaimDigest(onramperWallet, maxProverFee, amount, uint32(block.timestamp)));\\n        } else {\\n            onrampClaims[sellOrderKey][claimIndex] = ClaimDigest(onramperWallet, maxProverFee, amount, uint32(block.timestamp));\\n        }\\n\\n        /// Update total reserved\\n        sellAmounts[sellOrderKey].totalReserved = sellAmount.totalReserved;\\n\\n        emit ClaimPlaced(sellOrderKey, claimIndex, onramperWallet, amount, maxProverFee);\\n    }\\n\\n\\n    /**\\n     * @notice Called after the prover has verified the proof in the verifier contract.\\n     * @dev This function checks that the claim is still active and that the proof was verified. \\n     * @param proofNullifier a unique identifier for the proof. This is used to prevent replay attacks in the verifier contract, in\\n     * the case where the same proof is used to unlock muilple claims at the same index.\\n     * @param sellOrderIndex the index of sellOrderCtrs in the verifier contract that the proof of payment pointed to. Used to ensure\\n     * the email is correctly nullified.\\n     * @return transferAmount the amount of tokens that get transferred to the onramperWallet. This is the claim amount minus the proverFee.\\n     */\\n    function unlockFunds(SellOrder calldata sellOrder, uint256 sellOrderIndex, uint256 claimIndex, bytes32 proofNullifier) external nonReentrant returns (uint128 transferAmount) { // modified nonReentrant\\n        ///Need to pass in all inputs of this to ensure data is the same as the sell order\\n        bytes32 sellOrderKey = getSellKey(sellOrder.seller, sellOrder.price, sellOrder.token, sellOrder.verifyContract, sellOrder.sybilContract);\\n        \\n        ClaimDigest memory claim = onrampClaims[sellOrderKey][claimIndex];\\n\\n        Amounts memory sellAmount = sellAmounts[sellOrderKey];\\n            \\n        ///Check claims is still active\\n        require(claim.timestamp >= uint32(block.timestamp) - reserveTime, \\\"7\\\");\\n\\n        ///Verify proof with the verifier contract\\n        IOrderbookVerifier verifier = IOrderbookVerifier(sellOrder.verifyContract);\\n\\n        // Since prover address can be arbitrary, we assume it can be a hostile address and take precautions by using safeTransfer and making the function nonReentrant\\n        (address prover, bytes32 verifierSellKey) = verifier.verifyPayment(proofNullifier, sellOrderIndex, claimIndex);\\n\\n        require(sellOrderKey == verifierSellKey, \\\"7.5\\\");\\n        \\n        transferAmount = uint128(claim.amount) * uint128(sellOrder.price);\\n\\n        //Have to do a conversion as claim.amount is in cents and sellAmount.amount is in token decmals\\n        sellAmounts[sellOrderKey] = Amounts(sellAmount.amount - uint128(claim.amount) * uint128(sellOrder.price), sellAmount.totalReserved - uint64(claim.amount), sellAmount.scheduleCloseTimestamp, sellAmount.maxClaimAmount);\\n\\n        delete onrampClaims[sellOrderKey][claimIndex];\\n\\n        ///If prover is address 0 - prover doesn't take a fee (i.e. if proof was generated client-side)\\n        if (prover != address(0)) {\\n            uint128 proverFee = IOrderbookVerifier(sellOrder.verifyContract).calculateProverFee(sellOrder.token, sellOrder.price, claim.amount, prover);\\n            \\n            /**\\n             * @dev Do a conversion because maxProverFee is in cents. A prover could prevent a claim from being fulfilled by setting a proverFee \\n             * that is higher than maxProverFee. In this case, the prover will be unable to receive their funds but the user can still get a \\n             * different prover to generate a proof and unlock it.\\n             */\\n            require(proverFee <= uint128(claim.maxProverFee) * uint128(sellOrder.price), \\\"8\\\"); ///Check that the proverFee is less than the maxProverFee\\n\\n            if (proverFee != 0) {\\n                IERC20(sellOrder.token).safeTransfer(prover, proverFee);\\n            }\\n\\n            transferAmount -= proverFee;\\n        }\\n        \\n        IERC20(sellOrder.token).safeTransfer(claim.onramperWallet, transferAmount);\\n\\n        _updateReserves(sellOrder.token);\\n\\n        emit PaymentComplete(sellOrderKey, claimIndex);\\n    }\\n\\n    /**\\n     * @notice Function that lets a seller transfer out a portion of the unreserved funds of their order.\\n     * @param transferAmount The amount of tokens to transfer out in token native decimals. If transferAmount\\n     * >= unreserved funds, the transaction will fail. If a seller wants to transfer out all of their funds, or\\n     * an amount close to the total, they should set transferAmount = 0 and the contract will transfer out \\n     * everything.\\n     */\\n    function transferUnreserved(SellOrder calldata sellOrder, uint128 transferAmount) external nonReentrant {\\n        require(msg.sender == sellOrder.seller, \\\"8\\\");\\n\\n        bytes32 sellOrderKey = getSellKey(sellOrder.seller, sellOrder.price, sellOrder.token, sellOrder.verifyContract, sellOrder.sybilContract);\\n\\n        Amounts memory sellAmount = sellAmounts[sellOrderKey];\\n\\n        /**  \\n         * @dev This won't underflow because totalReserved only changes in placeClaim where sellAmount.totalReserved * \\n         * sellOrder.price < sellAmount.amount is checked. If price is changed, totalReserved is set to 0 and amount\\n         * can only change in this function, closeSellOrder or unlockFunds. unlockFunds decrements totalReserved and amount\\n         * in proportion.\\n        */\\n        uint128 totalUnreserved = sellAmount.amount - uint128(sellAmount.totalReserved) * uint128(sellOrder.price);\\n\\n        if (totalUnreserved != 0 && transferAmount <= totalUnreserved) {\\n            if (sellAmount.totalReserved == 0 && (transferAmount == 0 || transferAmount == totalUnreserved)) {\\n                //close the order\\n                _closeSellOrder(sellOrder);\\n\\n            } else if (transferAmount == 0) {\\n                //set transferAmount = 0 to transfer everything\\n                sellAmounts[sellOrderKey] = Amounts(sellAmount.amount - totalUnreserved, sellAmount.totalReserved, sellAmount.scheduleCloseTimestamp, sellAmount.maxClaimAmount); //decrement amount and totalReserved\\n                IERC20(sellOrder.token).safeTransfer(sellOrder.seller, totalUnreserved);\\n                emit DecreaseAmountFull(sellOrderKey, sellAmount.amount - totalUnreserved);\\n            } else {\\n                sellAmounts[sellOrderKey] = Amounts(sellAmount.amount - transferAmount, sellAmount.totalReserved, sellAmount.scheduleCloseTimestamp, sellAmount.maxClaimAmount); //decrement amount and totalReserved\\n                IERC20(sellOrder.token).safeTransfer(sellOrder.seller, transferAmount);\\n                emit DecreaseAmount(sellOrderKey, sellAmount.amount - transferAmount);\\n            }\\n            _updateReserves(sellOrder.token);\\n        }\\n    }\\n\\n\\n    /**\\n     * @notice Used to prevent further claims on a sell order. \\n     * @dev permissioned to the onramper.\\n     */\\n    function scheduleCloseSell(SellOrder calldata sellOrder) external nonReentrant { \\n        require(msg.sender == sellOrder.seller, \\\"9\\\");\\n\\n        bytes32 sellOrderKey = getSellKey(sellOrder.seller, sellOrder.price, sellOrder.token, sellOrder.verifyContract, sellOrder.sybilContract);\\n\\n        sellAmounts[sellOrderKey].scheduleCloseTimestamp = uint32(block.timestamp);\\n\\n        emit CloseScheduled(sellOrderKey);\\n    }\\n\\n    /** \\n     * @notice Used to cancel schedule close. \\n     * @dev Permissioned to the seller and the sybil contract.\\n     */\\n    function cancelScheduleCloseSell(SellOrder calldata sellOrder) external nonReentrant { \\n        require((msg.sender == sellOrder.seller) || (msg.sender == sellOrder.sybilContract), \\\"9\\\");\\n        \\n        bytes32 sellOrderKey = getSellKey(sellOrder.seller, sellOrder.price, sellOrder.token, sellOrder.verifyContract, sellOrder.sybilContract);\\n        \\n        sellAmounts[sellOrderKey].scheduleCloseTimestamp = 0;\\n\\n        emit CloseCancelled(sellOrderKey);\\n    }\\n\\n    /**\\n     * @notice Called to close a sell order after sufficient time has passed since scheduleCloseSell was called or there \\n     * are no more active claims. \\n     * @dev Permissioned to the seller and the sybil contract to prevent a price change when the seller intended for the order\\n     * to be closed.\\n     */\\n    function closeSellOrder(SellOrder calldata sellOrder) public nonReentrant { \\n        _closeSellOrder(sellOrder);\\n    }\\n\\n    /**\\n     * @notice Internal function that implements the logic of closeSellOrder.\\n     */\\n    function _closeSellOrder(SellOrder calldata sellOrder) internal {\\n        bytes32 sellOrderKey = _checkCloseSell(sellOrder);\\n\\n        delete onrampClaims[sellOrderKey];\\n        delete sellAmounts[sellOrderKey]; \\n        \\n        IERC20(sellOrder.token).safeTransfer(sellOrder.seller, sellAmounts[sellOrderKey].amount);\\n        _updateReserves(sellOrder.token);\\n\\n        emit SellOrderClosed(sellOrderKey);\\n    }\\n\\n\\n     /**\\n     * @notice Called to change the price fo a sell order after sufficient time has passed since scheduleCloseSell was called or there \\n     * are no more active claims. Creates an order with the new price and transfers funds across.\\n     * @dev Permissioned to the seller and the sybil contract to prevent the order being closed when the seller intended a price\\n     * change.\\n     */\\n    function updateSellPrice(SellOrder calldata sellOrder, uint96 newPrice) external nonReentrant { \\n        bytes32 oldOrderKey = _checkCloseSell(sellOrder);\\n\\n        _placeSell(sellOrder.seller, newPrice, sellOrder.token, sellOrder.verifyContract, sellOrder.sybilContract, sellAmounts[oldOrderKey].amount, sellAmounts[oldOrderKey].maxClaimAmount); //emits an event that a new sell order was placed\\n\\n        delete onrampClaims[oldOrderKey];\\n        delete sellAmounts[oldOrderKey]; \\n\\n        emit ChangePrice(oldOrderKey);\\n    }\\n    \\n    /**\\n     * @dev Internal function that runs checks to see if a sell order can be closed or the price can be changed.\\n     * @param sellOrder The sell order that is being closed or changed\\n     * @return sellOrderKey The sell order key of the sell order.\\n     */\\n    function _checkCloseSell(SellOrder calldata sellOrder) internal view returns (bytes32 sellOrderKey) {\\n        require((msg.sender == sellOrder.seller) || (msg.sender == sellOrder.sybilContract), \\\"11\\\"); \\n\\n        sellOrderKey = getSellKey(sellOrder.seller, sellOrder.price, sellOrder.token, sellOrder.verifyContract, sellOrder.sybilContract);\\n\\n        uint32 localReserveTime = reserveTime;\\n\\n        uint32 scheduleClose = sellAmounts[sellOrderKey].scheduleCloseTimestamp;\\n\\n        ///If sell order hasn't been scheduled to close for enough time -  manually go through the array to check if it's been long enough\\n        /// Note - this may fail due to gas limits if there are too many claims, in which the seller will have to wait reserveTime seconds.\\n        if (scheduleClose >= uint32(block.timestamp) - localReserveTime || scheduleClose == 0) {\\n            //loop through arrays to check if all claims are no longer active\\n            uint256 length = onrampClaims[sellOrderKey].length;\\n\\n            //ensure no claims are active\\n            for(uint index = 0; index < length;) {\\n                require(onrampClaims[sellOrderKey][index].timestamp < uint32(block.timestamp) - localReserveTime, \\\"12\\\");\\n                unchecked { ++index; } //As length is a uint256, this won't overflow\\n            }  \\n        }\\n    }\\n\\n    /**\\n     * @notice Internal function to place a new sell order.\\n     * @dev If two sell orders have the same sell key, they will be treated as the same sell order but the maxClaim amount of the second order\\n     * will overwrite that of the first order.\\n     */\\n    function _placeSell(address seller, uint96 price, address token, address verifyContract, address sybilContract, uint128 amount, uint32 maxClaimAmount) internal {\\n        bytes32 sellOrderKey = getSellKey(seller, price, token, verifyContract, sybilContract);\\n\\n        Amounts memory sellAmount = sellAmounts[sellOrderKey];\\n\\n        if (sellAmount.amount == 0) {\\n            emit NewSellOrder(seller, amount, price, token, verifyContract, sybilContract, maxClaimAmount); \\n        } else {\\n            emit IncreaseAmount(sellOrderKey, sellAmount.amount + amount);\\n        }\\n\\n        sellAmounts[sellOrderKey] = Amounts(sellAmount.amount + amount, sellAmount.totalReserved, sellAmount.scheduleCloseTimestamp, maxClaimAmount);\\n    }\\n\\n    /**\\n     * @notice This is an internal function called by claimSellOrder to clear expired claims.\\n     * @param expiredIdx is an array of indices in onrampClaims of expired claims or free indices. The contract verifies that these\\n     * indices are expired. ExpiredIdx should be an array in decreasing order.  If expiredIdx is an empty \\n     * array, the new claim is added to the end of the array, otherwise it is placed on the smallest index in expiredIdx that is free.\\n     * @return firstFree The index of the first free slot in onrampClaims. If expiredIdx is empty, this will be the length of the array.\\n     * @return claimLength The updated length of onrampClaims.\\n     * @return amountCleared The total amount of cents that were cleared from the sell order.\\n     */\\n    function clearExpired(bytes32 sellOrderKey, uint256[] calldata expiredIdx) private returns (uint256 firstFree, uint256 claimLength, uint64 amountCleared) { \\n\\n        /// Default to adding new claim to end of array\\n        firstFree = onrampClaims[sellOrderKey].length; \\n\\n        claimLength = firstFree; /// Keeps track of length of onrampClaims\\n\\n        uint32 localReserveTime = reserveTime;\\n\\n        amountCleared = 0;\\n\\n        for (uint index = 0; index < expiredIdx.length;) { /// If expiredIdx is empty, this loop won't run\\n            if (expiredIdx[index] >= claimLength) { \\n                unchecked { ++index; }\\n                continue; \\n            } /// If expiredIdx is too large\\n\\n            ClaimDigest memory claim = onrampClaims[sellOrderKey][expiredIdx[index]];\\n\\n            if (claim.timestamp < uint32(block.timestamp) - localReserveTime) { /// Checking if claim is expired or deleted\\n                \\n                amountCleared += uint64(claim.amount);\\n\\n                if (expiredIdx[index] == claimLength - 1) {\\n                    onrampClaims[sellOrderKey].pop(); \\n                    unchecked { --claimLength; } \\n                }\\n                else {\\n                    delete onrampClaims[sellOrderKey][expiredIdx[index]];\\n                }\\n                firstFree = expiredIdx[index]; /// Can add the new claim in this slot\\n                emit ClaimDeleted(sellOrderKey, expiredIdx[index]);\\n                \\n            }\\n            unchecked { ++index; } /// Won't overflow as expiredIdx.length is a uint256\\n        }\\n\\n        return (firstFree, claimLength, amountCleared);\\n    }\\n\\n\\n    /**\\n    * @dev Private function to transfer tokens into the contract.\\n    * @param token The address of the token to transfer.\\n    * @return tokenAmount The amount of tokens transferred into the contract.\\n    */\\n    function _transferIn(address token) private view returns (uint128 tokenAmount) { \\n        uint128 reserve = tokenBalances[token];\\n        uint128 balance = uint128(IERC20(token).balanceOf(address(this))); \\n        tokenAmount = balance - reserve;\\n        require(tokenAmount != 0, \\\"13\\\"); // Ensure tokens have been deposited\\n    }\\n\\n    /**\\n    * @dev Updates the reserves of a specific token by retrieving its current balance held by the contract.\\n    * @param token The address of the token for which the reserves are to be updated.\\n    * @notice This function should be called every time a token is deposited or withdrawn to keep the reserves up-to-date.\\n    */\\n    function _updateReserves(address token) private {\\n        tokenBalances[token] = uint128(IERC20(token).balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice getSellKey - a function which returns the sellOrderKey for a sell order.\\n     * @param seller - the address of the seller.\\n     * @param price - the price of the sell order.\\n     * @param token - the token of the sell order.\\n     * @param verifyContract - the address of the Verifier contract.\\n     * @param sybilContract - the address of the Sybil contract.\\n     * @dev This function is used to generate the sellOrderKey for a sell order.\\n     */\\n    function getSellKey(address seller, uint96 price, address token, address verifyContract, address sybilContract) public pure returns (bytes32 sellOrderKey) {\\n        sellOrderKey = keccak256(abi.encodePacked(seller, price, token, verifyContract, sybilContract));\\n    }\\n\\n}\\n\\n\\n\\n \\n\",\"versionPragma\":\"^0.8.18\"},\"contracts/core/dep/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.18;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"versionPragma\":\"^0.8.18\"},\"contracts/core/dep/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.18;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.18\"},\"contracts/core/dep/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.18;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"versionPragma\":\"^0.8.18\"},\"contracts/core/dep/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.18;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./IERC20Metadata.sol\\\";\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name = \\\"Quak Trade\\\";\\n    string private _symbol = \\\"QUAK\\\";\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor() {}\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"versionPragma\":\"^0.8.18\"},\"contracts/core/interfaces/IOrderbookVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.18;\\n\\n//interface containing only the functions of verifier that the orderbook needs to call\\ninterface IOrderbookVerifier {\\n\\n    function calculateProverFee(address token, uint96 price, uint32 amount, address prover) external view returns (uint128);\\n\\n    function verifyPayment(bytes32 proofNullifier, uint256 sellOrderIndex, uint256 claimIndex) external returns (address, bytes32);\\n\\n}\",\"versionPragma\":\"^0.8.18\"},\"contracts/core/dep/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.18;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.18\"},\"contracts/core/interfaces/IOrderbook.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.18;\\n\\n/**\\n * @dev Interface for the orderbook contract. \\n */\\ninterface IOrderbook {\\n\\n    struct SellOrder {\\n        address seller;\\n        uint96 price; \\n        address token;\\n        address verifyContract; \\n        address sybilContract;  \\n    }\\n\\n    //timestamp is 0 if the claim is deleted and is otherwise the timestamp of the block the claim was placed at\\n    struct ClaimDigest { \\n        address onramperWallet;\\n        uint32 maxProverFee; \\n        uint32 amount; \\n        uint32 timestamp;\\n    }\\n\\n    struct Amounts {\\n        uint128 amount;\\n        uint64 totalReserved; \\n        uint32 scheduleCloseTimestamp; \\n        uint32 maxClaimAmount; \\n    }\\n\\n\\n    function placeSellOrder(SellOrder calldata sellOrder, uint32 maxClaimAmount) external;\\n\\n    function claimSellOrder(SellOrder calldata sellOrder, address onramperWallet, uint32 amount, uint32 maxProverFee, uint256[] calldata expiredIdx) external returns (uint256 claimIndex);\\n\\n    function unlockFunds(SellOrder calldata sellOrder, uint256 sellOrderIndex, uint256 claimIndex, bytes32 proofNullifier) external returns (uint128 transferAmount);\\n\\n    function transferUnreserved(SellOrder calldata sellOrder, uint128 transferAmount) external;\\n\\n    function scheduleCloseSell(SellOrder calldata sellOrder) external;\\n\\n    function cancelScheduleCloseSell(SellOrder calldata sellOrder) external;\\n\\n    function closeSellOrder(SellOrder calldata sellOrder) external;\\n\\n    function updateSellPrice(SellOrder calldata sellOrder, uint96 newPrice) external;\\n\\n    function addTokens(address[] calldata tokens) external;\\n\\n    function addInterfaces(address[] calldata interfaces) external;\\n\\n    function removeTokens(address[] calldata tokens) external;\\n\\n    function removeInterfaces(address[] calldata interfaces) external;\\n\\n    /**\\n     * @dev Emitted when a claim was placed against a sell order.\\n     * @param sellOrderKey The key of the sell order.\\n     * @param claimIndex The index of the claim in the onRampClaims array.\\n     * @param onramperWallet The address of the wallet to receive unlocked funds.\\n     */\\n    event ClaimPlaced(bytes32 indexed sellOrderKey, uint256 claimIndex, address onramperWallet, uint32 amount, uint32 maxProverFee);\\n\\n    /**\\n     * @dev Emitted when a claim is deleted.\\n     * @param sellOrderKey The key of the sell order.\\n     * @param index The index of the claim in the onrampClaims array.\\n     */\\n    event ClaimDeleted(bytes32 indexed sellOrderKey, uint256 index);\\n\\n    /**\\n     * @dev Emitted during unlockFunds after funds have been transfered out of the sellOrder to the onramper.\\n     */\\n    event PaymentComplete(bytes32 indexed sellOrderKey, uint256 claimIndex);\\n\\n    /**\\n     * @dev Emitted when a new sell order is placed.\\n     */\\n    event NewSellOrder(address indexed seller, uint128 amount, uint96 price, address token, address verifyContract, address sybilContract, uint32 maxClaimAmount);\\n\\n    /**\\n     * @dev Emitted when the amount of a sell order is increased through placeSellOrder.\\n     */\\n    event IncreaseAmount(bytes32 indexed sellOrderKey, uint128 amount);\\n\\n    /**\\n     * @dev Emitted when the amount of a sell order is decreased through transferUnreserved by less than the total unreserved amount.\\n     */\\n    event DecreaseAmount(bytes32 indexed sellOrderKey, uint128 amount);\\n\\n    /**\\n     * @dev Emitted when the amount of a sell order is decreased through transferUnreserved by the entire unreserved amount of the sell order.\\n     */\\n    event DecreaseAmountFull(bytes32 indexed sellOrderKey, uint128 amount);\\n\\n    /**\\n     * @dev Emitted when a sell order is closed.\\n     */\\n    event SellOrderClosed(bytes32 indexed sellOrderKey);\\n\\n    /**\\n     * @dev Emitted when a sell order is closed because it's price has changed and a new sell order has opened. \\n     * @param sellOrderKey is the sellOrderKey of the sellOrder which just closed. The new sellOrder is emitted through either newSellOrder or increaseAmount \\n     * in the same transaction.\\n     */\\n    event ChangePrice(bytes32 indexed sellOrderKey);\\n\\n\\n    /**\\n     * @dev Emitted when a close is scheduled.\\n     */\\n    event CloseScheduled(bytes32 indexed sellOrderKey);\\n\\n    /**\\n     * @dev Emitted when a scheduling of a close is cancelled.\\n     */\\n    event CloseCancelled(bytes32 indexed sellOrderKey);\\n\\n}\",\"versionPragma\":\"^0.8.18\"},\"contracts/core/dep/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.18;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.18\"},\"contracts/core/dep/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.18;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\",\"versionPragma\":\"^0.8.18\"},\"contracts/core/dep/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.18;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"versionPragma\":\"^0.8.18\"},\"contracts/core/dep/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.18;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"./IERC20Permit.sol\\\";\\nimport {Address} from \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        if (nonceAfter != nonceBefore + 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\",\"versionPragma\":\"^0.8.18\"}}}","address":"0x52d98A770d4ccA5e7C976F5065a79DE1DcC59b67","bytecode":"0x60a06040523480156200001157600080fd5b506040516200538e3803806200538e833981810160405281019062000037919062000356565b60016000819055506200005f620000536200008c60201b60201c565b6200009460201b60201c565b8163ffffffff1660808163ffffffff168152505062000084816200015a60201b60201c565b5050620004b8565b600033905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6200016a620001f060201b60201c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620001dc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001d39062000424565b60405180910390fd5b620001ed816200009460201b60201c565b50565b620002006200008c60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16620002266200028160201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16146200027f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002769062000496565b60405180910390fd5b565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080fd5b600063ffffffff82169050919050565b620002cb81620002b0565b8114620002d757600080fd5b50565b600081519050620002eb81620002c0565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200031e82620002f1565b9050919050565b620003308162000311565b81146200033c57600080fd5b50565b600081519050620003508162000325565b92915050565b6000806040838503121562000370576200036f620002ab565b5b60006200038085828601620002da565b925050602062000393858286016200033f565b9150509250929050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006200040c6026836200039d565b91506200041982620003ae565b604082019050919050565b600060208201905081810360008301526200043f81620003fd565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006200047e6020836200039d565b91506200048b8262000446565b602082019050919050565b60006020820190508181036000830152620004b1816200046f565b9050919050565b608051614ea5620004e96000396000818161080f01528181611bd801528181612ac3015261307a0152614ea56000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c80637575be61116100b8578063ce254c111161007c578063ce254c111461038b578063d0eb2ac3146103a7578063d4ec787a146103c3578063dadffe57146103df578063daf9c210146103fb578063f2fde38b1461042b57610142565b80637575be61146102d05780637b4f274b146102ec5780638227bec81461031c5780638da5cb5b1461033a578063926c6b7a1461035857610142565b8063506746681161010a57806350674668146101fb57806350a3d9c01461022b578063523fba7f1461024757806353a78dbb146102775780636c3824ef146102aa578063715018a6146102c657610142565b806328dfcab3146101475780632cf30da01461016357806336d9dd4f14610193578063429ce93d146101c35780634ae05c7d146101df575b600080fd5b610161600480360381019061015c9190613a4a565b610447565b005b61017d60048036038101906101789190613ae3565b6105a8565b60405161018a9190613b76565b60405180910390f35b6101ad60048036038101906101a89190613c33565b610e84565b6040516101ba9190613cbd565b60405180910390f35b6101dd60048036038101906101d89190613cd8565b610ec0565b005b6101f960048036038101906101f49190613d7d565b61105f565b005b61021560048036038101906102109190613dca565b61110c565b6040516102229190613e12565b60405180910390f35b61024560048036038101906102409190613a4a565b61112c565b005b610261600480360381019061025c9190613dca565b6112d6565b60405161026e9190613b76565b60405180910390f35b610291600480360381019061028c9190613e2d565b611305565b6040516102a19493929190613e9c565b60405180910390f35b6102c460048036038101906102bf9190613d7d565b611385565b005b6102ce611432565b005b6102ea60048036038101906102e59190613d7d565b611446565b005b61030660048036038101906103019190613f63565b6114f3565b604051610313919061400e565b60405180910390f35b610324611bd6565b6040516103319190614029565b60405180910390f35b610342611bfa565b60405161034f9190614053565b60405180910390f35b610372600480360381019061036d919061406e565b611c24565b60405161038294939291906140ae565b60405180910390f35b6103a560048036038101906103a09190613d7d565b611cbd565b005b6103c160048036038101906103bc919061411f565b611d6a565b005b6103dd60048036038101906103d89190613a4a565b612459565b005b6103f960048036038101906103f4919061415f565b612475565b005b61041560048036038101906104109190613dca565b61271f565b6040516104229190613e12565b60405180910390f35b61044560048036038101906104409190613dca565b61273f565b005b61044f6127c2565b8060000160208101906104629190613dca565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c6906141fc565b60405180910390fd5b60006105388260000160208101906104e79190613dca565b8360200160208101906104fa919061421c565b84604001602081019061050d9190613dca565b8560600160208101906105209190613dca565b8660800160208101906105339190613dca565b610e84565b9050426003600083815260200190815260200160002060000160186101000a81548163ffffffff021916908363ffffffff160217905550807f31724a52793d2e5a3929e1855fcc03aea8657d548d3c360d8469b4aac01117e760405160405180910390a2506105a5612811565b50565b60006105b26127c2565b600061061b8660000160208101906105ca9190613dca565b8760200160208101906105dd919061421c565b8860400160208101906105f09190613dca565b8960600160208101906106039190613dca565b8a60800160208101906106169190613dca565b610e84565b9050600060046000838152602001908152602001600020858154811061064457610643614249565b5b906000526020600020016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160189054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201601c9054906101000a900463ffffffff1663ffffffff1663ffffffff168152505090506000600360008481526020019081526020016000206040518060800160405290816000820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016000820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160189054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201601c9054906101000a900463ffffffff1663ffffffff1663ffffffff168152505090507f00000000000000000000000000000000000000000000000000000000000000004261083991906142a7565b63ffffffff16826060015163ffffffff16101561088b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108829061432b565b60405180910390fd5b60008860600160208101906108a09190613dca565b90506000808273ffffffffffffffffffffffffffffffffffffffff1663858ed1d5898c8c6040518463ffffffff1660e01b81526004016108e29392919061434b565b60408051808303816000875af1158015610900573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092491906143ac565b9150915080861461096a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096190614438565b60405180910390fd5b8a602001602081019061097d919061421c565b6bffffffffffffffffffffffff16856040015163ffffffff166109a09190614458565b965060405180608001604052808c60200160208101906109c0919061421c565b6bffffffffffffffffffffffff16876040015163ffffffff166109e39190614458565b86600001516109f29190614495565b6fffffffffffffffffffffffffffffffff168152602001866040015163ffffffff168660200151610a2391906144d9565b67ffffffffffffffff168152602001856040015163ffffffff168152602001856060015163ffffffff168152506003600088815260200190815260200160002060008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060208201518160000160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060408201518160000160186101000a81548163ffffffff021916908363ffffffff160217905550606082015181600001601c6101000a81548163ffffffff021916908363ffffffff160217905550905050600460008781526020019081526020016000208981548110610b4757610b46614249565b5b90600052602060002001600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a81549063ffffffff02191690556000820160186101000a81549063ffffffff021916905560008201601c6101000a81549063ffffffff02191690555050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610dc85760008b6060016020810190610c099190613dca565b73ffffffffffffffffffffffffffffffffffffffff1663af5874018d6040016020810190610c379190613dca565b8e6020016020810190610c4a919061421c565b8960400151876040518563ffffffff1660e01b8152600401610c6f9493929190614524565b602060405180830381865afa158015610c8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb0919061457e565b90508b6020016020810190610cc5919061421c565b6bffffffffffffffffffffffff16866020015163ffffffff16610ce89190614458565b6fffffffffffffffffffffffffffffffff16816fffffffffffffffffffffffffffffffff161115610d4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d45906145f7565b60405180910390fd5b6000816fffffffffffffffffffffffffffffffff1614610db857610db783826fffffffffffffffffffffffffffffffff168e6040016020810190610d929190613dca565b73ffffffffffffffffffffffffffffffffffffffff1661281b9092919063ffffffff16565b5b8088610dc49190614495565b9750505b610e1b8560000151886fffffffffffffffffffffffffffffffff168d6040016020810190610df69190613dca565b73ffffffffffffffffffffffffffffffffffffffff1661281b9092919063ffffffff16565b610e368b6040016020810190610e319190613dca565b61289a565b857f3a5b3129086a71b049a9706cececb267b758912a9f612d42b93a16d412b1cb508a604051610e66919061400e565b60405180910390a2505050505050610e7c612811565b949350505050565b60008585858585604051602001610e9f959493929190614695565b60405160208183030381529060405280519060200120905095945050505050565b610ec86127c2565b6000610ed38361298c565b9050610f84836000016020810190610eeb9190613dca565b83856040016020810190610eff9190613dca565b866060016020810190610f129190613dca565b876080016020810190610f259190613dca565b6003600088815260200190815260200160002060000160009054906101000a90046fffffffffffffffffffffffffffffffff1660036000898152602001908152602001600020600001601c9054906101000a900463ffffffff16612c16565b600460008281526020019081526020016000206000610fa39190613978565b60036000828152602001908152602001600020600080820160006101000a8154906fffffffffffffffffffffffffffffffff02191690556000820160106101000a81549067ffffffffffffffff02191690556000820160186101000a81549063ffffffff021916905560008201601c6101000a81549063ffffffff02191690555050807f482050d624c06f09d8a617ff0965e79e87f08808cb16ebcbc8a5abb73eecf96860405160405180910390a25061105b612811565b5050565b611067612f11565b60005b828290508110156111075760016005600085858581811061108e5761108d614249565b5b90506020020160208101906110a39190613dca565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080806110ff906146f4565b91505061106a565b505050565b60066020528060005260406000206000915054906101000a900460ff1681565b6111346127c2565b8060000160208101906111479190613dca565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806111bd575080608001602081019061118e9190613dca565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6111fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111f3906141fc565b60405180910390fd5b60006112658260000160208101906112149190613dca565b836020016020810190611227919061421c565b84604001602081019061123a9190613dca565b85606001602081019061124d9190613dca565b8660800160208101906112609190613dca565b610e84565b905060006003600083815260200190815260200160002060000160186101000a81548163ffffffff021916908363ffffffff160217905550807fd3ed566e29c5a4437e1b8443c16d09c4ea82affd779cf3cdfb0b219df0a95e4060405160405180910390a2506112d3612811565b50565b60026020528060005260406000206000915054906101000a90046fffffffffffffffffffffffffffffffff1681565b60036020528060005260406000206000915090508060000160009054906101000a90046fffffffffffffffffffffffffffffffff16908060000160109054906101000a900467ffffffffffffffff16908060000160189054906101000a900463ffffffff169080600001601c9054906101000a900463ffffffff16905084565b61138d612f11565b60005b8282905081101561142d576000600560008585858181106113b4576113b3614249565b5b90506020020160208101906113c99190613dca565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080611425906146f4565b915050611390565b505050565b61143a612f11565b6114446000612f8f565b565b61144e612f11565b60005b828290508110156114ee5760016006600085858581811061147557611474614249565b5b905060200201602081019061148a9190613dca565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080806114e6906146f4565b915050611451565b505050565b60008073ffffffffffffffffffffffffffffffffffffffff1687608001602081019061151f9190613dca565b73ffffffffffffffffffffffffffffffffffffffff16146115855786608001602081019061154d9190613dca565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461158457600080fd5b5b60006115ee88600001602081019061159d9190613dca565b8960200160208101906115b0919061421c565b8a60400160208101906115c39190613dca565b8b60600160208101906115d69190613dca565b8c60800160208101906115e99190613dca565b610e84565b90506000600360008381526020019081526020016000206040518060800160405290816000820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016000820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160189054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201601c9054906101000a900463ffffffff1663ffffffff1663ffffffff168152505090506000816040015163ffffffff1614611727576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161171e90614788565b60405180910390fd5b806060015163ffffffff168763ffffffff16111561177a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611771906147f4565b60405180910390fd5b8563ffffffff168763ffffffff16116117c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117bf90614860565b60405180910390fd5b60008060006117d8858989613055565b925092509250829550808a63ffffffff1685602001516117f89190614880565b61180291906144d9565b846020019067ffffffffffffffff16908167ffffffffffffffff168152505083600001516fffffffffffffffffffffffffffffffff168c602001602081019061184b919061421c565b6bffffffffffffffffffffffff16856020015167ffffffffffffffff166118729190614458565b6fffffffffffffffffffffffffffffffff1611156118c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118bc90614908565b60405180910390fd5b818603611a10576004600086815260200190815260200160002060405180608001604052808d73ffffffffffffffffffffffffffffffffffffffff1681526020018b63ffffffff1681526020018c63ffffffff1681526020014263ffffffff168152509080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548163ffffffff021916908363ffffffff16021790555060408201518160000160186101000a81548163ffffffff021916908363ffffffff160217905550606082015181600001601c6101000a81548163ffffffff021916908363ffffffff1602179055505050611b48565b60405180608001604052808c73ffffffffffffffffffffffffffffffffffffffff1681526020018a63ffffffff1681526020018b63ffffffff1681526020014263ffffffff16815250600460008781526020019081526020016000208781548110611a7e57611a7d614249565b5b9060005260206000200160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548163ffffffff021916908363ffffffff16021790555060408201518160000160186101000a81548163ffffffff021916908363ffffffff160217905550606082015181600001601c6101000a81548163ffffffff021916908363ffffffff1602179055509050505b83602001516003600087815260200190815260200160002060000160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550847f3ca0647849870040005f8e189dd464a88d61dd02c2efe19860deda7db0123f2d878d8d8d604051611bbf9493929190614928565b60405180910390a250505050509695505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60046020528160005260406000208181548110611c4057600080fd5b90600052602060002001600091509150508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060000160149054906101000a900463ffffffff16908060000160189054906101000a900463ffffffff169080600001601c9054906101000a900463ffffffff16905084565b611cc5612f11565b60005b82829050811015611d6557600060066000858585818110611cec57611ceb614249565b5b9050602002016020810190611d019190613dca565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080611d5d906146f4565b915050611cc8565b505050565b611d726127c2565b816000016020810190611d859190613dca565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611df2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611de9906145f7565b60405180910390fd5b6000611e5b836000016020810190611e0a9190613dca565b846020016020810190611e1d919061421c565b856040016020810190611e309190613dca565b866060016020810190611e439190613dca565b876080016020810190611e569190613dca565b610e84565b90506000600360008381526020019081526020016000206040518060800160405290816000820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016000820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160189054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201601c9054906101000a900463ffffffff1663ffffffff1663ffffffff168152505090506000846020016020810190611f5c919061421c565b6bffffffffffffffffffffffff16826020015167ffffffffffffffff16611f839190614458565b8260000151611f929190614495565b90506000816fffffffffffffffffffffffffffffffff1614158015611fdb5750806fffffffffffffffffffffffffffffffff16846fffffffffffffffffffffffffffffffff1611155b1561244a576000826020015167ffffffffffffffff1614801561203e57506000846fffffffffffffffffffffffffffffffff16148061203d5750806fffffffffffffffffffffffffffffffff16846fffffffffffffffffffffffffffffffff16145b5b156120515761204c8561344c565b61242e565b6000846fffffffffffffffffffffffffffffffff160361224e5760405180608001604052808284600001516120869190614495565b6fffffffffffffffffffffffffffffffff168152602001836020015167ffffffffffffffff168152602001836040015163ffffffff168152602001836060015163ffffffff168152506003600085815260200190815260200160002060008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060208201518160000160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060408201518160000160186101000a81548163ffffffff021916908363ffffffff160217905550606082015181600001601c6101000a81548163ffffffff021916908363ffffffff1602179055509050506122028560000160208101906121b79190613dca565b826fffffffffffffffffffffffffffffffff168760400160208101906121dd9190613dca565b73ffffffffffffffffffffffffffffffffffffffff1661281b9092919063ffffffff16565b827fd835feef185f6e21acf9cd5b9202b1fb101ddfebc1e72916a3b4e31e4d67e2518284600001516122349190614495565b6040516122419190613b76565b60405180910390a261242d565b60405180608001604052808584600001516122699190614495565b6fffffffffffffffffffffffffffffffff168152602001836020015167ffffffffffffffff168152602001836040015163ffffffff168152602001836060015163ffffffff168152506003600085815260200190815260200160002060008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060208201518160000160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060408201518160000160186101000a81548163ffffffff021916908363ffffffff160217905550606082015181600001601c6101000a81548163ffffffff021916908363ffffffff1602179055509050506123e585600001602081019061239a9190613dca565b856fffffffffffffffffffffffffffffffff168760400160208101906123c09190613dca565b73ffffffffffffffffffffffffffffffffffffffff1661281b9092919063ffffffff16565b827fe6d60846826795516be5ff9eb1a11daaa5023dda04b4c9027d36be1a89beaa5b8584600001516124179190614495565b6040516124249190613b76565b60405180910390a25b5b6124498560400160208101906124449190613dca565b61289a565b5b505050612455612811565b5050565b6124616127c2565b61246a8161344c565b612472612811565b50565b61247d6127c2565b8160000160208101906124909190613dca565b73ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16148061250657508160000160208101906124d79190613dca565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b612545576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161253c90614788565b60405180910390fd5b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166125d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125c8906147f4565b60405180910390fd5b600560008360400160208101906125e89190613dca565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661266f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161266690614860565b60405180910390fd5b600061268c8360400160208101906126879190613dca565b6135d9565b90506126a98360400160208101906126a49190613dca565b61289a565b6127128360000160208101906126bf9190613dca565b8460200160208101906126d2919061421c565b8560400160208101906126e59190613dca565b8660600160208101906126f89190613dca565b87608001602081019061270b9190613dca565b8688612c16565b5061271b612811565b5050565b60056020528060005260406000206000915054906101000a900460ff1681565b612747612f11565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036127b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127ad906149df565b60405180910390fd5b6127bf81612f8f565b50565b600260005403612807576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127fe90614a4b565b60405180910390fd5b6002600081905550565b6001600081905550565b612895838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb858560405160240161284e929190614a6b565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613722565b505050565b8073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016128d39190614053565b602060405180830381865afa1580156128f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129149190614aa9565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555050565b60008160000160208101906129a19190613dca565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480612a1757508160800160208101906129e89190613dca565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b612a56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a4d90614b22565b60405180910390fd5b612abd826000016020810190612a6c9190613dca565b836020016020810190612a7f919061421c565b846040016020810190612a929190613dca565b856060016020810190612aa59190613dca565b866080016020810190612ab89190613dca565b610e84565b905060007f0000000000000000000000000000000000000000000000000000000000000000905060006003600084815260200190815260200160002060000160189054906101000a900463ffffffff1690508142612b1b91906142a7565b63ffffffff168163ffffffff16101580612b3b575060008163ffffffff16145b15612c0f5760006004600085815260200190815260200160002080549050905060005b81811015612c0c578342612b7291906142a7565b63ffffffff16600460008781526020019081526020016000208281548110612b9d57612b9c614249565b5b90600052602060002001600001601c9054906101000a900463ffffffff1663ffffffff1610612c01576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bf890614b8e565b60405180910390fd5b806001019050612b5e565b50505b5050919050565b6000612c258888888888610e84565b90506000600360008381526020019081526020016000206040518060800160405290816000820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016000820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160189054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201601c9054906101000a900463ffffffff1663ffffffff1663ffffffff16815250509050600081600001516fffffffffffffffffffffffffffffffff1603612d8c578873ffffffffffffffffffffffffffffffffffffffff167f6b221cca2cca9a5a31bcc5f15640820bd4297eb6ba1088c15c8f8964a3efca24858a8a8a8a89604051612d7f96959493929190614bae565b60405180910390a2612dd4565b817f45fff7f4f5d38c7b7734c5bd629d460f9666bb14d75789644c056c22a0c23023858360000151612dbe9190614c0f565b604051612dcb9190613b76565b60405180910390a25b6040518060800160405280858360000151612def9190614c0f565b6fffffffffffffffffffffffffffffffff168152602001826020015167ffffffffffffffff168152602001826040015163ffffffff1681526020018463ffffffff168152506003600084815260200190815260200160002060008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060208201518160000160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060408201518160000160186101000a81548163ffffffff021916908363ffffffff160217905550606082015181600001601c6101000a81548163ffffffff021916908363ffffffff160217905550905050505050505050505050565b612f196137b9565b73ffffffffffffffffffffffffffffffffffffffff16612f37611bfa565b73ffffffffffffffffffffffffffffffffffffffff1614612f8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f8490614c9f565b60405180910390fd5b565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008060006004600087815260200190815260200160002080549050925082915060007f000000000000000000000000000000000000000000000000000000000000000090506000915060005b8686905081101561344157838787838181106130c1576130c0614249565b5b90506020020135106130d85780600101905061343c565b6000600460008a8152602001908152602001600020888884818110613100576130ff614249565b5b905060200201358154811061311857613117614249565b5b906000526020600020016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160189054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201601c9054906101000a900463ffffffff1663ffffffff1663ffffffff16815250509050824261320391906142a7565b63ffffffff16816060015163ffffffff16101561343457806040015163ffffffff16846132309190614880565b935060018561323f9190614cbf565b88888481811061325257613251614249565b5b905060200201350361330e57600460008a815260200190815260200160002080548061328157613280614cf3565b5b60019003818190600052602060002001600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a81549063ffffffff02191690556000820160186101000a81549063ffffffff021916905560008201601c6101000a81549063ffffffff021916905550509055846001900394506133c6565b600460008a815260200190815260200160002088888481811061333457613333614249565b5b905060200201358154811061334c5761334b614249565b5b90600052602060002001600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a81549063ffffffff02191690556000820160186101000a81549063ffffffff021916905560008201601c6101000a81549063ffffffff021916905550505b8787838181106133d9576133d8614249565b5b905060200201359550887f736fb73656fd4129bc62ecc381a1eb14c9a2a7501197a8845d7af60b9316ba5f89898581811061341757613416614249565b5b9050602002013560405161342b919061400e565b60405180910390a25b816001019150505b6130a2565b505093509350939050565b60006134578261298c565b90506004600082815260200190815260200160002060006134789190613978565b60036000828152602001908152602001600020600080820160006101000a8154906fffffffffffffffffffffffffffffffff02191690556000820160106101000a81549067ffffffffffffffff02191690556000820160186101000a81549063ffffffff021916905560008201601c6101000a81549063ffffffff0219169055505061358d8260000160208101906135109190613dca565b6003600084815260200190815260200160002060000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168460400160208101906135689190613dca565b73ffffffffffffffffffffffffffffffffffffffff1661281b9092919063ffffffff16565b6135a88260400160208101906135a39190613dca565b61289a565b807f1250120c7ea5f036c5fcccbe892efa6a950e902d1c665f02544b9f0e17b6af7460405160405180910390a25050565b600080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a90046fffffffffffffffffffffffffffffffff16905060008373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016136759190614053565b602060405180830381865afa158015613692573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136b69190614aa9565b905081816136c49190614495565b92506000836fffffffffffffffffffffffffffffffff160361371b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161371290614d6e565b60405180910390fd5b5050919050565b600061374d828473ffffffffffffffffffffffffffffffffffffffff166137c190919063ffffffff16565b905060008151141580156137725750808060200190518101906137709190614dba565b155b156137b457826040517f5274afe70000000000000000000000000000000000000000000000000000000081526004016137ab9190614053565b60405180910390fd5b505050565b600033905090565b60606137cf838360006137d7565b905092915050565b60608147101561381e57306040517fcd7860590000000000000000000000000000000000000000000000000000000081526004016138159190614053565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1684866040516138479190614e58565b60006040518083038185875af1925050503d8060008114613884576040519150601f19603f3d011682016040523d82523d6000602084013e613889565b606091505b50915091506138998683836138a4565b925050509392505050565b6060826138b9576138b482613933565b61392b565b600082511480156138e1575060008473ffffffffffffffffffffffffffffffffffffffff163b145b1561392357836040517f9996b31500000000000000000000000000000000000000000000000000000000815260040161391a9190614053565b60405180910390fd5b81905061392c565b5b9392505050565b6000815111156139465780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50805460008255906000526020600020908101906139969190613999565b50565b5b80821115613a1857600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a81549063ffffffff02191690556000820160186101000a81549063ffffffff021916905560008201601c6101000a81549063ffffffff02191690555060010161399a565b5090565b600080fd5b600080fd5b600080fd5b600060a08284031215613a4157613a40613a26565b5b81905092915050565b600060a08284031215613a6057613a5f613a1c565b5b6000613a6e84828501613a2b565b91505092915050565b6000819050919050565b613a8a81613a77565b8114613a9557600080fd5b50565b600081359050613aa781613a81565b92915050565b6000819050919050565b613ac081613aad565b8114613acb57600080fd5b50565b600081359050613add81613ab7565b92915050565b6000806000806101008587031215613afe57613afd613a1c565b5b6000613b0c87828801613a2b565b94505060a0613b1d87828801613a98565b93505060c0613b2e87828801613a98565b92505060e0613b3f87828801613ace565b91505092959194509250565b60006fffffffffffffffffffffffffffffffff82169050919050565b613b7081613b4b565b82525050565b6000602082019050613b8b6000830184613b67565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613bbc82613b91565b9050919050565b613bcc81613bb1565b8114613bd757600080fd5b50565b600081359050613be981613bc3565b92915050565b60006bffffffffffffffffffffffff82169050919050565b613c1081613bef565b8114613c1b57600080fd5b50565b600081359050613c2d81613c07565b92915050565b600080600080600060a08688031215613c4f57613c4e613a1c565b5b6000613c5d88828901613bda565b9550506020613c6e88828901613c1e565b9450506040613c7f88828901613bda565b9350506060613c9088828901613bda565b9250506080613ca188828901613bda565b9150509295509295909350565b613cb781613aad565b82525050565b6000602082019050613cd26000830184613cae565b92915050565b60008060c08385031215613cef57613cee613a1c565b5b6000613cfd85828601613a2b565b92505060a0613d0e85828601613c1e565b9150509250929050565b600080fd5b600080fd5b600080fd5b60008083601f840112613d3d57613d3c613d18565b5b8235905067ffffffffffffffff811115613d5a57613d59613d1d565b5b602083019150836020820283011115613d7657613d75613d22565b5b9250929050565b60008060208385031215613d9457613d93613a1c565b5b600083013567ffffffffffffffff811115613db257613db1613a21565b5b613dbe85828601613d27565b92509250509250929050565b600060208284031215613de057613ddf613a1c565b5b6000613dee84828501613bda565b91505092915050565b60008115159050919050565b613e0c81613df7565b82525050565b6000602082019050613e276000830184613e03565b92915050565b600060208284031215613e4357613e42613a1c565b5b6000613e5184828501613ace565b91505092915050565b600067ffffffffffffffff82169050919050565b613e7781613e5a565b82525050565b600063ffffffff82169050919050565b613e9681613e7d565b82525050565b6000608082019050613eb16000830187613b67565b613ebe6020830186613e6e565b613ecb6040830185613e8d565b613ed86060830184613e8d565b95945050505050565b613eea81613e7d565b8114613ef557600080fd5b50565b600081359050613f0781613ee1565b92915050565b60008083601f840112613f2357613f22613d18565b5b8235905067ffffffffffffffff811115613f4057613f3f613d1d565b5b602083019150836020820283011115613f5c57613f5b613d22565b5b9250929050565b6000806000806000806101208789031215613f8157613f80613a1c565b5b6000613f8f89828a01613a2b565b96505060a0613fa089828a01613bda565b95505060c0613fb189828a01613ef8565b94505060e0613fc289828a01613ef8565b93505061010087013567ffffffffffffffff811115613fe457613fe3613a21565b5b613ff089828a01613f0d565b92509250509295509295509295565b61400881613a77565b82525050565b60006020820190506140236000830184613fff565b92915050565b600060208201905061403e6000830184613e8d565b92915050565b61404d81613bb1565b82525050565b60006020820190506140686000830184614044565b92915050565b6000806040838503121561408557614084613a1c565b5b600061409385828601613ace565b92505060206140a485828601613a98565b9150509250929050565b60006080820190506140c36000830187614044565b6140d06020830186613e8d565b6140dd6040830185613e8d565b6140ea6060830184613e8d565b95945050505050565b6140fc81613b4b565b811461410757600080fd5b50565b600081359050614119816140f3565b92915050565b60008060c0838503121561413657614135613a1c565b5b600061414485828601613a2b565b92505060a06141558582860161410a565b9150509250929050565b60008060c0838503121561417657614175613a1c565b5b600061418485828601613a2b565b92505060a061419585828601613ef8565b9150509250929050565b600082825260208201905092915050565b7f3900000000000000000000000000000000000000000000000000000000000000600082015250565b60006141e660018361419f565b91506141f1826141b0565b602082019050919050565b60006020820190508181036000830152614215816141d9565b9050919050565b60006020828403121561423257614231613a1c565b5b600061424084828501613c1e565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006142b282613e7d565b91506142bd83613e7d565b9250828203905063ffffffff8111156142d9576142d8614278565b5b92915050565b7f3700000000000000000000000000000000000000000000000000000000000000600082015250565b600061431560018361419f565b9150614320826142df565b602082019050919050565b6000602082019050818103600083015261434481614308565b9050919050565b60006060820190506143606000830186613cae565b61436d6020830185613fff565b61437a6040830184613fff565b949350505050565b60008151905061439181613bc3565b92915050565b6000815190506143a681613ab7565b92915050565b600080604083850312156143c3576143c2613a1c565b5b60006143d185828601614382565b92505060206143e285828601614397565b9150509250929050565b7f372e350000000000000000000000000000000000000000000000000000000000600082015250565b600061442260038361419f565b915061442d826143ec565b602082019050919050565b6000602082019050818103600083015261445181614415565b9050919050565b600061446382613b4b565b915061446e83613b4b565b925082820261447c81613b4b565b915080821461448e5761448d614278565b5b5092915050565b60006144a082613b4b565b91506144ab83613b4b565b925082820390506fffffffffffffffffffffffffffffffff8111156144d3576144d2614278565b5b92915050565b60006144e482613e5a565b91506144ef83613e5a565b9250828203905067ffffffffffffffff81111561450f5761450e614278565b5b92915050565b61451e81613bef565b82525050565b60006080820190506145396000830187614044565b6145466020830186614515565b6145536040830185613e8d565b6145606060830184614044565b95945050505050565b600081519050614578816140f3565b92915050565b60006020828403121561459457614593613a1c565b5b60006145a284828501614569565b91505092915050565b7f3800000000000000000000000000000000000000000000000000000000000000600082015250565b60006145e160018361419f565b91506145ec826145ab565b602082019050919050565b60006020820190508181036000830152614610816145d4565b9050919050565b60008160601b9050919050565b600061462f82614617565b9050919050565b600061464182614624565b9050919050565b61465961465482613bb1565b614636565b82525050565b60008160a01b9050919050565b60006146778261465f565b9050919050565b61468f61468a82613bef565b61466c565b82525050565b60006146a18288614648565b6014820191506146b1828761467e565b600c820191506146c18286614648565b6014820191506146d18285614648565b6014820191506146e18284614648565b6014820191508190509695505050505050565b60006146ff82613a77565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361473157614730614278565b5b600182019050919050565b7f3100000000000000000000000000000000000000000000000000000000000000600082015250565b600061477260018361419f565b915061477d8261473c565b602082019050919050565b600060208201905081810360008301526147a181614765565b9050919050565b7f3200000000000000000000000000000000000000000000000000000000000000600082015250565b60006147de60018361419f565b91506147e9826147a8565b602082019050919050565b6000602082019050818103600083015261480d816147d1565b9050919050565b7f3300000000000000000000000000000000000000000000000000000000000000600082015250565b600061484a60018361419f565b915061485582614814565b602082019050919050565b600060208201905081810360008301526148798161483d565b9050919050565b600061488b82613e5a565b915061489683613e5a565b9250828201905067ffffffffffffffff8111156148b6576148b5614278565b5b92915050565b7f3400000000000000000000000000000000000000000000000000000000000000600082015250565b60006148f260018361419f565b91506148fd826148bc565b602082019050919050565b60006020820190508181036000830152614921816148e5565b9050919050565b600060808201905061493d6000830187613fff565b61494a6020830186614044565b6149576040830185613e8d565b6149646060830184613e8d565b95945050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006149c960268361419f565b91506149d48261496d565b604082019050919050565b600060208201905081810360008301526149f8816149bc565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000614a35601f8361419f565b9150614a40826149ff565b602082019050919050565b60006020820190508181036000830152614a6481614a28565b9050919050565b6000604082019050614a806000830185614044565b614a8d6020830184613fff565b9392505050565b600081519050614aa381613a81565b92915050565b600060208284031215614abf57614abe613a1c565b5b6000614acd84828501614a94565b91505092915050565b7f3131000000000000000000000000000000000000000000000000000000000000600082015250565b6000614b0c60028361419f565b9150614b1782614ad6565b602082019050919050565b60006020820190508181036000830152614b3b81614aff565b9050919050565b7f3132000000000000000000000000000000000000000000000000000000000000600082015250565b6000614b7860028361419f565b9150614b8382614b42565b602082019050919050565b60006020820190508181036000830152614ba781614b6b565b9050919050565b600060c082019050614bc36000830189613b67565b614bd06020830188614515565b614bdd6040830187614044565b614bea6060830186614044565b614bf76080830185614044565b614c0460a0830184613e8d565b979650505050505050565b6000614c1a82613b4b565b9150614c2583613b4b565b925082820190506fffffffffffffffffffffffffffffffff811115614c4d57614c4c614278565b5b92915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000614c8960208361419f565b9150614c9482614c53565b602082019050919050565b60006020820190508181036000830152614cb881614c7c565b9050919050565b6000614cca82613a77565b9150614cd583613a77565b9250828203905081811115614ced57614cec614278565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f3133000000000000000000000000000000000000000000000000000000000000600082015250565b6000614d5860028361419f565b9150614d6382614d22565b602082019050919050565b60006020820190508181036000830152614d8781614d4b565b9050919050565b614d9781613df7565b8114614da257600080fd5b50565b600081519050614db481614d8e565b92915050565b600060208284031215614dd057614dcf613a1c565b5b6000614dde84828501614da5565b91505092915050565b600081519050919050565b600081905092915050565b60005b83811015614e1b578082015181840152602081019050614e00565b60008484015250505050565b6000614e3282614de7565b614e3c8185614df2565b9350614e4c818560208601614dfd565b80840191505092915050565b6000614e648284614e27565b91508190509291505056fea26469706673582212207f4c9def65d5807d55f7b210137e1d8d10483f7dcd164b7a686e2128a406619e64736f6c63430008120033","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106101425760003560e01c80637575be61116100b8578063ce254c111161007c578063ce254c111461038b578063d0eb2ac3146103a7578063d4ec787a146103c3578063dadffe57146103df578063daf9c210146103fb578063f2fde38b1461042b57610142565b80637575be61146102d05780637b4f274b146102ec5780638227bec81461031c5780638da5cb5b1461033a578063926c6b7a1461035857610142565b8063506746681161010a57806350674668146101fb57806350a3d9c01461022b578063523fba7f1461024757806353a78dbb146102775780636c3824ef146102aa578063715018a6146102c657610142565b806328dfcab3146101475780632cf30da01461016357806336d9dd4f14610193578063429ce93d146101c35780634ae05c7d146101df575b600080fd5b610161600480360381019061015c9190613a4a565b610447565b005b61017d60048036038101906101789190613ae3565b6105a8565b60405161018a9190613b76565b60405180910390f35b6101ad60048036038101906101a89190613c33565b610e84565b6040516101ba9190613cbd565b60405180910390f35b6101dd60048036038101906101d89190613cd8565b610ec0565b005b6101f960048036038101906101f49190613d7d565b61105f565b005b61021560048036038101906102109190613dca565b61110c565b6040516102229190613e12565b60405180910390f35b61024560048036038101906102409190613a4a565b61112c565b005b610261600480360381019061025c9190613dca565b6112d6565b60405161026e9190613b76565b60405180910390f35b610291600480360381019061028c9190613e2d565b611305565b6040516102a19493929190613e9c565b60405180910390f35b6102c460048036038101906102bf9190613d7d565b611385565b005b6102ce611432565b005b6102ea60048036038101906102e59190613d7d565b611446565b005b61030660048036038101906103019190613f63565b6114f3565b604051610313919061400e565b60405180910390f35b610324611bd6565b6040516103319190614029565b60405180910390f35b610342611bfa565b60405161034f9190614053565b60405180910390f35b610372600480360381019061036d919061406e565b611c24565b60405161038294939291906140ae565b60405180910390f35b6103a560048036038101906103a09190613d7d565b611cbd565b005b6103c160048036038101906103bc919061411f565b611d6a565b005b6103dd60048036038101906103d89190613a4a565b612459565b005b6103f960048036038101906103f4919061415f565b612475565b005b61041560048036038101906104109190613dca565b61271f565b6040516104229190613e12565b60405180910390f35b61044560048036038101906104409190613dca565b61273f565b005b61044f6127c2565b8060000160208101906104629190613dca565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c6906141fc565b60405180910390fd5b60006105388260000160208101906104e79190613dca565b8360200160208101906104fa919061421c565b84604001602081019061050d9190613dca565b8560600160208101906105209190613dca565b8660800160208101906105339190613dca565b610e84565b9050426003600083815260200190815260200160002060000160186101000a81548163ffffffff021916908363ffffffff160217905550807f31724a52793d2e5a3929e1855fcc03aea8657d548d3c360d8469b4aac01117e760405160405180910390a2506105a5612811565b50565b60006105b26127c2565b600061061b8660000160208101906105ca9190613dca565b8760200160208101906105dd919061421c565b8860400160208101906105f09190613dca565b8960600160208101906106039190613dca565b8a60800160208101906106169190613dca565b610e84565b9050600060046000838152602001908152602001600020858154811061064457610643614249565b5b906000526020600020016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160189054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201601c9054906101000a900463ffffffff1663ffffffff1663ffffffff168152505090506000600360008481526020019081526020016000206040518060800160405290816000820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016000820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160189054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201601c9054906101000a900463ffffffff1663ffffffff1663ffffffff168152505090507f00000000000000000000000000000000000000000000000000000000000000004261083991906142a7565b63ffffffff16826060015163ffffffff16101561088b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108829061432b565b60405180910390fd5b60008860600160208101906108a09190613dca565b90506000808273ffffffffffffffffffffffffffffffffffffffff1663858ed1d5898c8c6040518463ffffffff1660e01b81526004016108e29392919061434b565b60408051808303816000875af1158015610900573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092491906143ac565b9150915080861461096a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096190614438565b60405180910390fd5b8a602001602081019061097d919061421c565b6bffffffffffffffffffffffff16856040015163ffffffff166109a09190614458565b965060405180608001604052808c60200160208101906109c0919061421c565b6bffffffffffffffffffffffff16876040015163ffffffff166109e39190614458565b86600001516109f29190614495565b6fffffffffffffffffffffffffffffffff168152602001866040015163ffffffff168660200151610a2391906144d9565b67ffffffffffffffff168152602001856040015163ffffffff168152602001856060015163ffffffff168152506003600088815260200190815260200160002060008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060208201518160000160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060408201518160000160186101000a81548163ffffffff021916908363ffffffff160217905550606082015181600001601c6101000a81548163ffffffff021916908363ffffffff160217905550905050600460008781526020019081526020016000208981548110610b4757610b46614249565b5b90600052602060002001600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a81549063ffffffff02191690556000820160186101000a81549063ffffffff021916905560008201601c6101000a81549063ffffffff02191690555050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610dc85760008b6060016020810190610c099190613dca565b73ffffffffffffffffffffffffffffffffffffffff1663af5874018d6040016020810190610c379190613dca565b8e6020016020810190610c4a919061421c565b8960400151876040518563ffffffff1660e01b8152600401610c6f9493929190614524565b602060405180830381865afa158015610c8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb0919061457e565b90508b6020016020810190610cc5919061421c565b6bffffffffffffffffffffffff16866020015163ffffffff16610ce89190614458565b6fffffffffffffffffffffffffffffffff16816fffffffffffffffffffffffffffffffff161115610d4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d45906145f7565b60405180910390fd5b6000816fffffffffffffffffffffffffffffffff1614610db857610db783826fffffffffffffffffffffffffffffffff168e6040016020810190610d929190613dca565b73ffffffffffffffffffffffffffffffffffffffff1661281b9092919063ffffffff16565b5b8088610dc49190614495565b9750505b610e1b8560000151886fffffffffffffffffffffffffffffffff168d6040016020810190610df69190613dca565b73ffffffffffffffffffffffffffffffffffffffff1661281b9092919063ffffffff16565b610e368b6040016020810190610e319190613dca565b61289a565b857f3a5b3129086a71b049a9706cececb267b758912a9f612d42b93a16d412b1cb508a604051610e66919061400e565b60405180910390a2505050505050610e7c612811565b949350505050565b60008585858585604051602001610e9f959493929190614695565b60405160208183030381529060405280519060200120905095945050505050565b610ec86127c2565b6000610ed38361298c565b9050610f84836000016020810190610eeb9190613dca565b83856040016020810190610eff9190613dca565b866060016020810190610f129190613dca565b876080016020810190610f259190613dca565b6003600088815260200190815260200160002060000160009054906101000a90046fffffffffffffffffffffffffffffffff1660036000898152602001908152602001600020600001601c9054906101000a900463ffffffff16612c16565b600460008281526020019081526020016000206000610fa39190613978565b60036000828152602001908152602001600020600080820160006101000a8154906fffffffffffffffffffffffffffffffff02191690556000820160106101000a81549067ffffffffffffffff02191690556000820160186101000a81549063ffffffff021916905560008201601c6101000a81549063ffffffff02191690555050807f482050d624c06f09d8a617ff0965e79e87f08808cb16ebcbc8a5abb73eecf96860405160405180910390a25061105b612811565b5050565b611067612f11565b60005b828290508110156111075760016005600085858581811061108e5761108d614249565b5b90506020020160208101906110a39190613dca565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080806110ff906146f4565b91505061106a565b505050565b60066020528060005260406000206000915054906101000a900460ff1681565b6111346127c2565b8060000160208101906111479190613dca565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806111bd575080608001602081019061118e9190613dca565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6111fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111f3906141fc565b60405180910390fd5b60006112658260000160208101906112149190613dca565b836020016020810190611227919061421c565b84604001602081019061123a9190613dca565b85606001602081019061124d9190613dca565b8660800160208101906112609190613dca565b610e84565b905060006003600083815260200190815260200160002060000160186101000a81548163ffffffff021916908363ffffffff160217905550807fd3ed566e29c5a4437e1b8443c16d09c4ea82affd779cf3cdfb0b219df0a95e4060405160405180910390a2506112d3612811565b50565b60026020528060005260406000206000915054906101000a90046fffffffffffffffffffffffffffffffff1681565b60036020528060005260406000206000915090508060000160009054906101000a90046fffffffffffffffffffffffffffffffff16908060000160109054906101000a900467ffffffffffffffff16908060000160189054906101000a900463ffffffff169080600001601c9054906101000a900463ffffffff16905084565b61138d612f11565b60005b8282905081101561142d576000600560008585858181106113b4576113b3614249565b5b90506020020160208101906113c99190613dca565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080611425906146f4565b915050611390565b505050565b61143a612f11565b6114446000612f8f565b565b61144e612f11565b60005b828290508110156114ee5760016006600085858581811061147557611474614249565b5b905060200201602081019061148a9190613dca565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080806114e6906146f4565b915050611451565b505050565b60008073ffffffffffffffffffffffffffffffffffffffff1687608001602081019061151f9190613dca565b73ffffffffffffffffffffffffffffffffffffffff16146115855786608001602081019061154d9190613dca565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461158457600080fd5b5b60006115ee88600001602081019061159d9190613dca565b8960200160208101906115b0919061421c565b8a60400160208101906115c39190613dca565b8b60600160208101906115d69190613dca565b8c60800160208101906115e99190613dca565b610e84565b90506000600360008381526020019081526020016000206040518060800160405290816000820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016000820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160189054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201601c9054906101000a900463ffffffff1663ffffffff1663ffffffff168152505090506000816040015163ffffffff1614611727576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161171e90614788565b60405180910390fd5b806060015163ffffffff168763ffffffff16111561177a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611771906147f4565b60405180910390fd5b8563ffffffff168763ffffffff16116117c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117bf90614860565b60405180910390fd5b60008060006117d8858989613055565b925092509250829550808a63ffffffff1685602001516117f89190614880565b61180291906144d9565b846020019067ffffffffffffffff16908167ffffffffffffffff168152505083600001516fffffffffffffffffffffffffffffffff168c602001602081019061184b919061421c565b6bffffffffffffffffffffffff16856020015167ffffffffffffffff166118729190614458565b6fffffffffffffffffffffffffffffffff1611156118c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118bc90614908565b60405180910390fd5b818603611a10576004600086815260200190815260200160002060405180608001604052808d73ffffffffffffffffffffffffffffffffffffffff1681526020018b63ffffffff1681526020018c63ffffffff1681526020014263ffffffff168152509080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548163ffffffff021916908363ffffffff16021790555060408201518160000160186101000a81548163ffffffff021916908363ffffffff160217905550606082015181600001601c6101000a81548163ffffffff021916908363ffffffff1602179055505050611b48565b60405180608001604052808c73ffffffffffffffffffffffffffffffffffffffff1681526020018a63ffffffff1681526020018b63ffffffff1681526020014263ffffffff16815250600460008781526020019081526020016000208781548110611a7e57611a7d614249565b5b9060005260206000200160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548163ffffffff021916908363ffffffff16021790555060408201518160000160186101000a81548163ffffffff021916908363ffffffff160217905550606082015181600001601c6101000a81548163ffffffff021916908363ffffffff1602179055509050505b83602001516003600087815260200190815260200160002060000160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550847f3ca0647849870040005f8e189dd464a88d61dd02c2efe19860deda7db0123f2d878d8d8d604051611bbf9493929190614928565b60405180910390a250505050509695505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60046020528160005260406000208181548110611c4057600080fd5b90600052602060002001600091509150508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060000160149054906101000a900463ffffffff16908060000160189054906101000a900463ffffffff169080600001601c9054906101000a900463ffffffff16905084565b611cc5612f11565b60005b82829050811015611d6557600060066000858585818110611cec57611ceb614249565b5b9050602002016020810190611d019190613dca565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080611d5d906146f4565b915050611cc8565b505050565b611d726127c2565b816000016020810190611d859190613dca565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611df2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611de9906145f7565b60405180910390fd5b6000611e5b836000016020810190611e0a9190613dca565b846020016020810190611e1d919061421c565b856040016020810190611e309190613dca565b866060016020810190611e439190613dca565b876080016020810190611e569190613dca565b610e84565b90506000600360008381526020019081526020016000206040518060800160405290816000820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016000820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160189054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201601c9054906101000a900463ffffffff1663ffffffff1663ffffffff168152505090506000846020016020810190611f5c919061421c565b6bffffffffffffffffffffffff16826020015167ffffffffffffffff16611f839190614458565b8260000151611f929190614495565b90506000816fffffffffffffffffffffffffffffffff1614158015611fdb5750806fffffffffffffffffffffffffffffffff16846fffffffffffffffffffffffffffffffff1611155b1561244a576000826020015167ffffffffffffffff1614801561203e57506000846fffffffffffffffffffffffffffffffff16148061203d5750806fffffffffffffffffffffffffffffffff16846fffffffffffffffffffffffffffffffff16145b5b156120515761204c8561344c565b61242e565b6000846fffffffffffffffffffffffffffffffff160361224e5760405180608001604052808284600001516120869190614495565b6fffffffffffffffffffffffffffffffff168152602001836020015167ffffffffffffffff168152602001836040015163ffffffff168152602001836060015163ffffffff168152506003600085815260200190815260200160002060008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060208201518160000160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060408201518160000160186101000a81548163ffffffff021916908363ffffffff160217905550606082015181600001601c6101000a81548163ffffffff021916908363ffffffff1602179055509050506122028560000160208101906121b79190613dca565b826fffffffffffffffffffffffffffffffff168760400160208101906121dd9190613dca565b73ffffffffffffffffffffffffffffffffffffffff1661281b9092919063ffffffff16565b827fd835feef185f6e21acf9cd5b9202b1fb101ddfebc1e72916a3b4e31e4d67e2518284600001516122349190614495565b6040516122419190613b76565b60405180910390a261242d565b60405180608001604052808584600001516122699190614495565b6fffffffffffffffffffffffffffffffff168152602001836020015167ffffffffffffffff168152602001836040015163ffffffff168152602001836060015163ffffffff168152506003600085815260200190815260200160002060008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060208201518160000160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060408201518160000160186101000a81548163ffffffff021916908363ffffffff160217905550606082015181600001601c6101000a81548163ffffffff021916908363ffffffff1602179055509050506123e585600001602081019061239a9190613dca565b856fffffffffffffffffffffffffffffffff168760400160208101906123c09190613dca565b73ffffffffffffffffffffffffffffffffffffffff1661281b9092919063ffffffff16565b827fe6d60846826795516be5ff9eb1a11daaa5023dda04b4c9027d36be1a89beaa5b8584600001516124179190614495565b6040516124249190613b76565b60405180910390a25b5b6124498560400160208101906124449190613dca565b61289a565b5b505050612455612811565b5050565b6124616127c2565b61246a8161344c565b612472612811565b50565b61247d6127c2565b8160000160208101906124909190613dca565b73ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16148061250657508160000160208101906124d79190613dca565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b612545576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161253c90614788565b60405180910390fd5b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166125d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125c8906147f4565b60405180910390fd5b600560008360400160208101906125e89190613dca565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661266f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161266690614860565b60405180910390fd5b600061268c8360400160208101906126879190613dca565b6135d9565b90506126a98360400160208101906126a49190613dca565b61289a565b6127128360000160208101906126bf9190613dca565b8460200160208101906126d2919061421c565b8560400160208101906126e59190613dca565b8660600160208101906126f89190613dca565b87608001602081019061270b9190613dca565b8688612c16565b5061271b612811565b5050565b60056020528060005260406000206000915054906101000a900460ff1681565b612747612f11565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036127b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127ad906149df565b60405180910390fd5b6127bf81612f8f565b50565b600260005403612807576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127fe90614a4b565b60405180910390fd5b6002600081905550565b6001600081905550565b612895838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb858560405160240161284e929190614a6b565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613722565b505050565b8073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016128d39190614053565b602060405180830381865afa1580156128f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129149190614aa9565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555050565b60008160000160208101906129a19190613dca565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480612a1757508160800160208101906129e89190613dca565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b612a56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a4d90614b22565b60405180910390fd5b612abd826000016020810190612a6c9190613dca565b836020016020810190612a7f919061421c565b846040016020810190612a929190613dca565b856060016020810190612aa59190613dca565b866080016020810190612ab89190613dca565b610e84565b905060007f0000000000000000000000000000000000000000000000000000000000000000905060006003600084815260200190815260200160002060000160189054906101000a900463ffffffff1690508142612b1b91906142a7565b63ffffffff168163ffffffff16101580612b3b575060008163ffffffff16145b15612c0f5760006004600085815260200190815260200160002080549050905060005b81811015612c0c578342612b7291906142a7565b63ffffffff16600460008781526020019081526020016000208281548110612b9d57612b9c614249565b5b90600052602060002001600001601c9054906101000a900463ffffffff1663ffffffff1610612c01576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bf890614b8e565b60405180910390fd5b806001019050612b5e565b50505b5050919050565b6000612c258888888888610e84565b90506000600360008381526020019081526020016000206040518060800160405290816000820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016000820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160189054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201601c9054906101000a900463ffffffff1663ffffffff1663ffffffff16815250509050600081600001516fffffffffffffffffffffffffffffffff1603612d8c578873ffffffffffffffffffffffffffffffffffffffff167f6b221cca2cca9a5a31bcc5f15640820bd4297eb6ba1088c15c8f8964a3efca24858a8a8a8a89604051612d7f96959493929190614bae565b60405180910390a2612dd4565b817f45fff7f4f5d38c7b7734c5bd629d460f9666bb14d75789644c056c22a0c23023858360000151612dbe9190614c0f565b604051612dcb9190613b76565b60405180910390a25b6040518060800160405280858360000151612def9190614c0f565b6fffffffffffffffffffffffffffffffff168152602001826020015167ffffffffffffffff168152602001826040015163ffffffff1681526020018463ffffffff168152506003600084815260200190815260200160002060008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060208201518160000160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060408201518160000160186101000a81548163ffffffff021916908363ffffffff160217905550606082015181600001601c6101000a81548163ffffffff021916908363ffffffff160217905550905050505050505050505050565b612f196137b9565b73ffffffffffffffffffffffffffffffffffffffff16612f37611bfa565b73ffffffffffffffffffffffffffffffffffffffff1614612f8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f8490614c9f565b60405180910390fd5b565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008060006004600087815260200190815260200160002080549050925082915060007f000000000000000000000000000000000000000000000000000000000000000090506000915060005b8686905081101561344157838787838181106130c1576130c0614249565b5b90506020020135106130d85780600101905061343c565b6000600460008a8152602001908152602001600020888884818110613100576130ff614249565b5b905060200201358154811061311857613117614249565b5b906000526020600020016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160189054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201601c9054906101000a900463ffffffff1663ffffffff1663ffffffff16815250509050824261320391906142a7565b63ffffffff16816060015163ffffffff16101561343457806040015163ffffffff16846132309190614880565b935060018561323f9190614cbf565b88888481811061325257613251614249565b5b905060200201350361330e57600460008a815260200190815260200160002080548061328157613280614cf3565b5b60019003818190600052602060002001600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a81549063ffffffff02191690556000820160186101000a81549063ffffffff021916905560008201601c6101000a81549063ffffffff021916905550509055846001900394506133c6565b600460008a815260200190815260200160002088888481811061333457613333614249565b5b905060200201358154811061334c5761334b614249565b5b90600052602060002001600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a81549063ffffffff02191690556000820160186101000a81549063ffffffff021916905560008201601c6101000a81549063ffffffff021916905550505b8787838181106133d9576133d8614249565b5b905060200201359550887f736fb73656fd4129bc62ecc381a1eb14c9a2a7501197a8845d7af60b9316ba5f89898581811061341757613416614249565b5b9050602002013560405161342b919061400e565b60405180910390a25b816001019150505b6130a2565b505093509350939050565b60006134578261298c565b90506004600082815260200190815260200160002060006134789190613978565b60036000828152602001908152602001600020600080820160006101000a8154906fffffffffffffffffffffffffffffffff02191690556000820160106101000a81549067ffffffffffffffff02191690556000820160186101000a81549063ffffffff021916905560008201601c6101000a81549063ffffffff0219169055505061358d8260000160208101906135109190613dca565b6003600084815260200190815260200160002060000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168460400160208101906135689190613dca565b73ffffffffffffffffffffffffffffffffffffffff1661281b9092919063ffffffff16565b6135a88260400160208101906135a39190613dca565b61289a565b807f1250120c7ea5f036c5fcccbe892efa6a950e902d1c665f02544b9f0e17b6af7460405160405180910390a25050565b600080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a90046fffffffffffffffffffffffffffffffff16905060008373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016136759190614053565b602060405180830381865afa158015613692573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136b69190614aa9565b905081816136c49190614495565b92506000836fffffffffffffffffffffffffffffffff160361371b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161371290614d6e565b60405180910390fd5b5050919050565b600061374d828473ffffffffffffffffffffffffffffffffffffffff166137c190919063ffffffff16565b905060008151141580156137725750808060200190518101906137709190614dba565b155b156137b457826040517f5274afe70000000000000000000000000000000000000000000000000000000081526004016137ab9190614053565b60405180910390fd5b505050565b600033905090565b60606137cf838360006137d7565b905092915050565b60608147101561381e57306040517fcd7860590000000000000000000000000000000000000000000000000000000081526004016138159190614053565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1684866040516138479190614e58565b60006040518083038185875af1925050503d8060008114613884576040519150601f19603f3d011682016040523d82523d6000602084013e613889565b606091505b50915091506138998683836138a4565b925050509392505050565b6060826138b9576138b482613933565b61392b565b600082511480156138e1575060008473ffffffffffffffffffffffffffffffffffffffff163b145b1561392357836040517f9996b31500000000000000000000000000000000000000000000000000000000815260040161391a9190614053565b60405180910390fd5b81905061392c565b5b9392505050565b6000815111156139465780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50805460008255906000526020600020908101906139969190613999565b50565b5b80821115613a1857600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a81549063ffffffff02191690556000820160186101000a81549063ffffffff021916905560008201601c6101000a81549063ffffffff02191690555060010161399a565b5090565b600080fd5b600080fd5b600080fd5b600060a08284031215613a4157613a40613a26565b5b81905092915050565b600060a08284031215613a6057613a5f613a1c565b5b6000613a6e84828501613a2b565b91505092915050565b6000819050919050565b613a8a81613a77565b8114613a9557600080fd5b50565b600081359050613aa781613a81565b92915050565b6000819050919050565b613ac081613aad565b8114613acb57600080fd5b50565b600081359050613add81613ab7565b92915050565b6000806000806101008587031215613afe57613afd613a1c565b5b6000613b0c87828801613a2b565b94505060a0613b1d87828801613a98565b93505060c0613b2e87828801613a98565b92505060e0613b3f87828801613ace565b91505092959194509250565b60006fffffffffffffffffffffffffffffffff82169050919050565b613b7081613b4b565b82525050565b6000602082019050613b8b6000830184613b67565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613bbc82613b91565b9050919050565b613bcc81613bb1565b8114613bd757600080fd5b50565b600081359050613be981613bc3565b92915050565b60006bffffffffffffffffffffffff82169050919050565b613c1081613bef565b8114613c1b57600080fd5b50565b600081359050613c2d81613c07565b92915050565b600080600080600060a08688031215613c4f57613c4e613a1c565b5b6000613c5d88828901613bda565b9550506020613c6e88828901613c1e565b9450506040613c7f88828901613bda565b9350506060613c9088828901613bda565b9250506080613ca188828901613bda565b9150509295509295909350565b613cb781613aad565b82525050565b6000602082019050613cd26000830184613cae565b92915050565b60008060c08385031215613cef57613cee613a1c565b5b6000613cfd85828601613a2b565b92505060a0613d0e85828601613c1e565b9150509250929050565b600080fd5b600080fd5b600080fd5b60008083601f840112613d3d57613d3c613d18565b5b8235905067ffffffffffffffff811115613d5a57613d59613d1d565b5b602083019150836020820283011115613d7657613d75613d22565b5b9250929050565b60008060208385031215613d9457613d93613a1c565b5b600083013567ffffffffffffffff811115613db257613db1613a21565b5b613dbe85828601613d27565b92509250509250929050565b600060208284031215613de057613ddf613a1c565b5b6000613dee84828501613bda565b91505092915050565b60008115159050919050565b613e0c81613df7565b82525050565b6000602082019050613e276000830184613e03565b92915050565b600060208284031215613e4357613e42613a1c565b5b6000613e5184828501613ace565b91505092915050565b600067ffffffffffffffff82169050919050565b613e7781613e5a565b82525050565b600063ffffffff82169050919050565b613e9681613e7d565b82525050565b6000608082019050613eb16000830187613b67565b613ebe6020830186613e6e565b613ecb6040830185613e8d565b613ed86060830184613e8d565b95945050505050565b613eea81613e7d565b8114613ef557600080fd5b50565b600081359050613f0781613ee1565b92915050565b60008083601f840112613f2357613f22613d18565b5b8235905067ffffffffffffffff811115613f4057613f3f613d1d565b5b602083019150836020820283011115613f5c57613f5b613d22565b5b9250929050565b6000806000806000806101208789031215613f8157613f80613a1c565b5b6000613f8f89828a01613a2b565b96505060a0613fa089828a01613bda565b95505060c0613fb189828a01613ef8565b94505060e0613fc289828a01613ef8565b93505061010087013567ffffffffffffffff811115613fe457613fe3613a21565b5b613ff089828a01613f0d565b92509250509295509295509295565b61400881613a77565b82525050565b60006020820190506140236000830184613fff565b92915050565b600060208201905061403e6000830184613e8d565b92915050565b61404d81613bb1565b82525050565b60006020820190506140686000830184614044565b92915050565b6000806040838503121561408557614084613a1c565b5b600061409385828601613ace565b92505060206140a485828601613a98565b9150509250929050565b60006080820190506140c36000830187614044565b6140d06020830186613e8d565b6140dd6040830185613e8d565b6140ea6060830184613e8d565b95945050505050565b6140fc81613b4b565b811461410757600080fd5b50565b600081359050614119816140f3565b92915050565b60008060c0838503121561413657614135613a1c565b5b600061414485828601613a2b565b92505060a06141558582860161410a565b9150509250929050565b60008060c0838503121561417657614175613a1c565b5b600061418485828601613a2b565b92505060a061419585828601613ef8565b9150509250929050565b600082825260208201905092915050565b7f3900000000000000000000000000000000000000000000000000000000000000600082015250565b60006141e660018361419f565b91506141f1826141b0565b602082019050919050565b60006020820190508181036000830152614215816141d9565b9050919050565b60006020828403121561423257614231613a1c565b5b600061424084828501613c1e565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006142b282613e7d565b91506142bd83613e7d565b9250828203905063ffffffff8111156142d9576142d8614278565b5b92915050565b7f3700000000000000000000000000000000000000000000000000000000000000600082015250565b600061431560018361419f565b9150614320826142df565b602082019050919050565b6000602082019050818103600083015261434481614308565b9050919050565b60006060820190506143606000830186613cae565b61436d6020830185613fff565b61437a6040830184613fff565b949350505050565b60008151905061439181613bc3565b92915050565b6000815190506143a681613ab7565b92915050565b600080604083850312156143c3576143c2613a1c565b5b60006143d185828601614382565b92505060206143e285828601614397565b9150509250929050565b7f372e350000000000000000000000000000000000000000000000000000000000600082015250565b600061442260038361419f565b915061442d826143ec565b602082019050919050565b6000602082019050818103600083015261445181614415565b9050919050565b600061446382613b4b565b915061446e83613b4b565b925082820261447c81613b4b565b915080821461448e5761448d614278565b5b5092915050565b60006144a082613b4b565b91506144ab83613b4b565b925082820390506fffffffffffffffffffffffffffffffff8111156144d3576144d2614278565b5b92915050565b60006144e482613e5a565b91506144ef83613e5a565b9250828203905067ffffffffffffffff81111561450f5761450e614278565b5b92915050565b61451e81613bef565b82525050565b60006080820190506145396000830187614044565b6145466020830186614515565b6145536040830185613e8d565b6145606060830184614044565b95945050505050565b600081519050614578816140f3565b92915050565b60006020828403121561459457614593613a1c565b5b60006145a284828501614569565b91505092915050565b7f3800000000000000000000000000000000000000000000000000000000000000600082015250565b60006145e160018361419f565b91506145ec826145ab565b602082019050919050565b60006020820190508181036000830152614610816145d4565b9050919050565b60008160601b9050919050565b600061462f82614617565b9050919050565b600061464182614624565b9050919050565b61465961465482613bb1565b614636565b82525050565b60008160a01b9050919050565b60006146778261465f565b9050919050565b61468f61468a82613bef565b61466c565b82525050565b60006146a18288614648565b6014820191506146b1828761467e565b600c820191506146c18286614648565b6014820191506146d18285614648565b6014820191506146e18284614648565b6014820191508190509695505050505050565b60006146ff82613a77565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361473157614730614278565b5b600182019050919050565b7f3100000000000000000000000000000000000000000000000000000000000000600082015250565b600061477260018361419f565b915061477d8261473c565b602082019050919050565b600060208201905081810360008301526147a181614765565b9050919050565b7f3200000000000000000000000000000000000000000000000000000000000000600082015250565b60006147de60018361419f565b91506147e9826147a8565b602082019050919050565b6000602082019050818103600083015261480d816147d1565b9050919050565b7f3300000000000000000000000000000000000000000000000000000000000000600082015250565b600061484a60018361419f565b915061485582614814565b602082019050919050565b600060208201905081810360008301526148798161483d565b9050919050565b600061488b82613e5a565b915061489683613e5a565b9250828201905067ffffffffffffffff8111156148b6576148b5614278565b5b92915050565b7f3400000000000000000000000000000000000000000000000000000000000000600082015250565b60006148f260018361419f565b91506148fd826148bc565b602082019050919050565b60006020820190508181036000830152614921816148e5565b9050919050565b600060808201905061493d6000830187613fff565b61494a6020830186614044565b6149576040830185613e8d565b6149646060830184613e8d565b95945050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006149c960268361419f565b91506149d48261496d565b604082019050919050565b600060208201905081810360008301526149f8816149bc565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000614a35601f8361419f565b9150614a40826149ff565b602082019050919050565b60006020820190508181036000830152614a6481614a28565b9050919050565b6000604082019050614a806000830185614044565b614a8d6020830184613fff565b9392505050565b600081519050614aa381613a81565b92915050565b600060208284031215614abf57614abe613a1c565b5b6000614acd84828501614a94565b91505092915050565b7f3131000000000000000000000000000000000000000000000000000000000000600082015250565b6000614b0c60028361419f565b9150614b1782614ad6565b602082019050919050565b60006020820190508181036000830152614b3b81614aff565b9050919050565b7f3132000000000000000000000000000000000000000000000000000000000000600082015250565b6000614b7860028361419f565b9150614b8382614b42565b602082019050919050565b60006020820190508181036000830152614ba781614b6b565b9050919050565b600060c082019050614bc36000830189613b67565b614bd06020830188614515565b614bdd6040830187614044565b614bea6060830186614044565b614bf76080830185614044565b614c0460a0830184613e8d565b979650505050505050565b6000614c1a82613b4b565b9150614c2583613b4b565b925082820190506fffffffffffffffffffffffffffffffff811115614c4d57614c4c614278565b5b92915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000614c8960208361419f565b9150614c9482614c53565b602082019050919050565b60006020820190508181036000830152614cb881614c7c565b9050919050565b6000614cca82613a77565b9150614cd583613a77565b9250828203905081811115614ced57614cec614278565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f3133000000000000000000000000000000000000000000000000000000000000600082015250565b6000614d5860028361419f565b9150614d6382614d22565b602082019050919050565b60006020820190508181036000830152614d8781614d4b565b9050919050565b614d9781613df7565b8114614da257600080fd5b50565b600081519050614db481614d8e565b92915050565b600060208284031215614dd057614dcf613a1c565b5b6000614dde84828501614da5565b91505092915050565b600081519050919050565b600081905092915050565b60005b83811015614e1b578082015181840152602081019050614e00565b60008484015250505050565b6000614e3282614de7565b614e3c8185614df2565b9350614e4c818560208601614dfd565b80840191505092915050565b6000614e648284614e27565b91508190509291505056fea26469706673582212207f4c9def65d5807d55f7b210137e1d8d10483f7dcd164b7a686e2128a406619e64736f6c63430008120033","abi":[{"inputs":[{"internalType":"uint32","name":"_reserveTime","type":"uint32"},{"internalType":"address","name":"_initialOwner","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"AddressEmptyCode","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"AddressInsufficientBalance","type":"error"},{"inputs":[],"name":"FailedInnerCall","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"SafeERC20FailedOperation","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"sellOrderKey","type":"bytes32"}],"name":"ChangePrice","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"sellOrderKey","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"index","type":"uint256"}],"name":"ClaimDeleted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"sellOrderKey","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"claimIndex","type":"uint256"},{"indexed":false,"internalType":"address","name":"onramperWallet","type":"address"},{"indexed":false,"internalType":"uint32","name":"amount","type":"uint32"},{"indexed":false,"internalType":"uint32","name":"maxProverFee","type":"uint32"}],"name":"ClaimPlaced","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"sellOrderKey","type":"bytes32"}],"name":"CloseCancelled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"sellOrderKey","type":"bytes32"}],"name":"CloseScheduled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"sellOrderKey","type":"bytes32"},{"indexed":false,"internalType":"uint128","name":"amount","type":"uint128"}],"name":"DecreaseAmount","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"sellOrderKey","type":"bytes32"},{"indexed":false,"internalType":"uint128","name":"amount","type":"uint128"}],"name":"DecreaseAmountFull","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"sellOrderKey","type":"bytes32"},{"indexed":false,"internalType":"uint128","name":"amount","type":"uint128"}],"name":"IncreaseAmount","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"seller","type":"address"},{"indexed":false,"internalType":"uint128","name":"amount","type":"uint128"},{"indexed":false,"internalType":"uint96","name":"price","type":"uint96"},{"indexed":false,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"address","name":"verifyContract","type":"address"},{"indexed":false,"internalType":"address","name":"sybilContract","type":"address"},{"indexed":false,"internalType":"uint32","name":"maxClaimAmount","type":"uint32"}],"name":"NewSellOrder","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"sellOrderKey","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"claimIndex","type":"uint256"}],"name":"PaymentComplete","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"sellOrderKey","type":"bytes32"}],"name":"SellOrderClosed","type":"event"},{"inputs":[{"internalType":"address[]","name":"interfaces","type":"address[]"}],"name":"addInterfaces","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"tokens","type":"address[]"}],"name":"addTokens","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint96","name":"price","type":"uint96"},{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"verifyContract","type":"address"},{"internalType":"address","name":"sybilContract","type":"address"}],"internalType":"struct IOrderbook.SellOrder","name":"sellOrder","type":"tuple"}],"name":"cancelScheduleCloseSell","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint96","name":"price","type":"uint96"},{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"verifyContract","type":"address"},{"internalType":"address","name":"sybilContract","type":"address"}],"internalType":"struct IOrderbook.SellOrder","name":"sellOrder","type":"tuple"},{"internalType":"address","name":"onramperWallet","type":"address"},{"internalType":"uint32","name":"amount","type":"uint32"},{"internalType":"uint32","name":"maxProverFee","type":"uint32"},{"internalType":"uint256[]","name":"expiredIdx","type":"uint256[]"}],"name":"claimSellOrder","outputs":[{"internalType":"uint256","name":"claimIndex","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint96","name":"price","type":"uint96"},{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"verifyContract","type":"address"},{"internalType":"address","name":"sybilContract","type":"address"}],"internalType":"struct IOrderbook.SellOrder","name":"sellOrder","type":"tuple"}],"name":"closeSellOrder","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint96","name":"price","type":"uint96"},{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"verifyContract","type":"address"},{"internalType":"address","name":"sybilContract","type":"address"}],"name":"getSellKey","outputs":[{"internalType":"bytes32","name":"sellOrderKey","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"onrampClaims","outputs":[{"internalType":"address","name":"onramperWallet","type":"address"},{"internalType":"uint32","name":"maxProverFee","type":"uint32"},{"internalType":"uint32","name":"amount","type":"uint32"},{"internalType":"uint32","name":"timestamp","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint96","name":"price","type":"uint96"},{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"verifyContract","type":"address"},{"internalType":"address","name":"sybilContract","type":"address"}],"internalType":"struct IOrderbook.SellOrder","name":"sellOrder","type":"tuple"},{"internalType":"uint32","name":"maxClaimAmount","type":"uint32"}],"name":"placeSellOrder","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"interfaces","type":"address[]"}],"name":"removeInterfaces","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"tokens","type":"address[]"}],"name":"removeTokens","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"reserveTime","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint96","name":"price","type":"uint96"},{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"verifyContract","type":"address"},{"internalType":"address","name":"sybilContract","type":"address"}],"internalType":"struct IOrderbook.SellOrder","name":"sellOrder","type":"tuple"}],"name":"scheduleCloseSell","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"sellAmounts","outputs":[{"internalType":"uint128","name":"amount","type":"uint128"},{"internalType":"uint64","name":"totalReserved","type":"uint64"},{"internalType":"uint32","name":"scheduleCloseTimestamp","type":"uint32"},{"internalType":"uint32","name":"maxClaimAmount","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"tokenBalances","outputs":[{"internalType":"uint128","name":"","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint96","name":"price","type":"uint96"},{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"verifyContract","type":"address"},{"internalType":"address","name":"sybilContract","type":"address"}],"internalType":"struct IOrderbook.SellOrder","name":"sellOrder","type":"tuple"},{"internalType":"uint128","name":"transferAmount","type":"uint128"}],"name":"transferUnreserved","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint96","name":"price","type":"uint96"},{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"verifyContract","type":"address"},{"internalType":"address","name":"sybilContract","type":"address"}],"internalType":"struct IOrderbook.SellOrder","name":"sellOrder","type":"tuple"},{"internalType":"uint256","name":"sellOrderIndex","type":"uint256"},{"internalType":"uint256","name":"claimIndex","type":"uint256"},{"internalType":"bytes32","name":"proofNullifier","type":"bytes32"}],"name":"unlockFunds","outputs":[{"internalType":"uint128","name":"transferAmount","type":"uint128"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint96","name":"price","type":"uint96"},{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"verifyContract","type":"address"},{"internalType":"address","name":"sybilContract","type":"address"}],"internalType":"struct IOrderbook.SellOrder","name":"sellOrder","type":"tuple"},{"internalType":"uint96","name":"newPrice","type":"uint96"}],"name":"updateSellPrice","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"whitelistedInterfaces","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"whitelistedTokens","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}]}